// <auto-generated />
using System;
using Backend_Riwi_LinkUp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Linkup_ms.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240917161920_UpdatingSeeders")]
    partial class UpdatingSeeders
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Clans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "berners lee"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ritchie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "gates"
                        },
                        new
                        {
                            Id = 4,
                            Name = "jeff bezzos"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClanId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("GenderId");

                    b.ToTable("Coders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1997, 5, 22, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrollador de software con experiencia en diseño de soluciones digitales, modelado de datos y metodologías ágiles. me destaco en resolver problemas complejos y en comunicación efectiva.",
                            GenderId = 1,
                            Name = "edgar cardona",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQH22ztGRhoM2g/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1677008729241?e=1731542400&v=beta&t=89RVHJpVnq8_m5ObsEU3CEs0KVrBraYI4gGWdIEuXEM"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(2006, 9, 30, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrollador backend con aptitudes en c#, .net. especializado en aplicaciones del servidor e integración de api. buen trabajo en equipo y solucion de problemas",
                            GenderId = 1,
                            Name = "nicolas martinez",
                            UrlImage = "https://avatars.githubusercontent.com/u/164014608?v=4"
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1995, 3, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "actualmente, aprendo y aplico .net, typescript, react, next.js y sql, desarrollando habilidades en aplicaciones web y manejo de bases de datos.",
                            GenderId = 1,
                            Name = "brayan acosta",
                            UrlImage = "https://media.licdn.com/dms/image/v2/C4D03AQHAwWzaQDI6gw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1641180503207?e=1731542400&v=beta&t=A7lWrZBzJ84ZlLdFsvKA73tbZKdP1vfPGuvf3Ah6XH4"
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(2003, 7, 18, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "apasionado por crear y resolver problemas. me encanta aprender y enfrentar desafíos, compartir conocimientos y desarrollar soluciones innovadoras que impacten positivamente.",
                            GenderId = 1,
                            Name = "jose barreto",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQEqn-8BGpvfaw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1724345138906?e=1731542400&v=beta&t=wWL1nKrccb9DfJVg8Dz6v49L3AIpunv8gkovi5BpqgQ"
                        },
                        new
                        {
                            Id = 5,
                            Birthday = new DateTime(2002, 11, 5, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "desarrollador frontend con experiencia en react, typescript y next.js, creando aplicaciones web seguras, eficientes y con arquitectura modular.",
                            GenderId = 1,
                            Name = "juan arias",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQGXb8dGisr-wQ/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1724327950529?e=1731542400&v=beta&t=uCMHF7cJT2SfM-4acPddFycPWzAUYFWYr_WofvG2Cf8"
                        },
                        new
                        {
                            Id = 6,
                            Birthday = new DateTime(1997, 2, 28, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "científico de datos en aprendizaje automático y análisis de datos. experto en python, r y visualización de datos.",
                            GenderId = 1,
                            Name = "juan rojas",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQGyhYNRLL9edg/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1681701914743?e=1731542400&v=beta&t=0aYfJifoDREE5dhY4dCSD8IECOotdQqJ5HwtLfAKkxw"
                        },
                        new
                        {
                            Id = 7,
                            Birthday = new DateTime(1994, 6, 12, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "especialista en seguridad informática con experiencia en hacking ético y auditorías de seguridad de sistemas y datos.",
                            GenderId = 2,
                            Name = "ava martinez",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.KgiAsoOxSdFdiFJvih.W&pid=ImgGn"
                        },
                        new
                        {
                            Id = 8,
                            Birthday = new DateTime(1987, 10, 8, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrollador de videojuegos en unity y unreal engine. especializado en crear experiencias inmersivas y entornos interactivos.",
                            GenderId = 2,
                            Name = "noah anderson",
                            UrlImage = "https://tse3.mm.bing.net/th?id=OIG4.BdR6gNaEahI_dGinSr75&pid=ImgGn"
                        },
                        new
                        {
                            Id = 9,
                            Birthday = new DateTime(1996, 4, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrolladora de blockchain con experiencia en ethereum y solidity para contratos inteligentes y aplicaciones descentralizadas.",
                            GenderId = 2,
                            Name = "isabella white",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.xpBYsldYYgGJy_7if8T1&pid=ImgGn"
                        },
                        new
                        {
                            Id = 10,
                            Birthday = new DateTime(1990, 1, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "desarrollador full-stack con experiencia en javascript, node.js y frameworks web modernos. experto en desarrollo cliente y servidor.",
                            GenderId = 1,
                            Name = "alex johnson",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG3.zDCj3kinyaUjd0kHGTbh&pid=ImgGn"
                        },
                        new
                        {
                            Id = 11,
                            Birthday = new DateTime(1992, 7, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "ingeniera de software con experiencia en java y spring boot. enfocada en construir aplicaciones web escalables y código limpio.",
                            GenderId = 2,
                            Name = "maria gomez",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG4..woi4PcXMJrWci3PHx.1&pid=ImgGn"
                        },
                        new
                        {
                            Id = 12,
                            Birthday = new DateTime(1994, 8, 22, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "consultor devops con experiencia en automatización y servicios en la nube. experto en configurar pipelines ci/cd y gestionar infraestructura.",
                            GenderId = 1,
                            Name = "joseph kim",
                            UrlImage = "https://tse2.mm.bing.net/th?id=OIG3.g2nXDL0zV1p0rTcvZOHY&pid=ImgGn"
                        },
                        new
                        {
                            Id = 13,
                            Birthday = new DateTime(1989, 12, 30, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "diseñadora de productos con experiencia en investigación de usuarios y prototipado. experta en usabilidad y sistemas de diseño.",
                            GenderId = 1,
                            Name = "elena rodriguez",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.cxyneb3Z34jIy_OLnI45&pid=ImgGn"
                        },
                        new
                        {
                            Id = 14,
                            Birthday = new DateTime(1995, 11, 3, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "desarrollador backend especializado en arquitectura de microservicios y desarrollo de api en java y spring cloud.",
                            GenderId = 1,
                            Name = "luis fernandez",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG3.qynXeqPsRs8Lov_9_gIi&pid=ImgGn"
                        },
                        new
                        {
                            Id = 15,
                            Birthday = new DateTime(1991, 5, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "ingeniera front-end especializada en vue.js y diseño responsivo. experta en crear aplicaciones web dinámicas y accesibles.",
                            GenderId = 2,
                            Name = "natalie o'connor",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.wzqtcIUhErA8sGbNbu76&pid=ImgGn"
                        },
                        new
                        {
                            Id = 16,
                            Birthday = new DateTime(1990, 9, 17, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "analista de datos con habilidades en sql y herramientas de visualización como tableau. experto en extraer insights para decisiones.",
                            GenderId = 1,
                            Name = "damian lee",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG3.5zeLHiPCO7K2Mh8UZoUG&pid=ImgGn"
                        },
                        new
                        {
                            Id = 17,
                            Birthday = new DateTime(1993, 4, 9, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "investigadora en inteligencia artificial con foco en procesamiento de lenguaje natural y algoritmos de aprendizaje automático.",
                            GenderId = 2,
                            Name = "zoe wilson",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG4.dyXC5j5LkJq0TE_mtSMA&pid=ImgGn"
                        },
                        new
                        {
                            Id = 18,
                            Birthday = new DateTime(1988, 11, 18, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "administrador de sistemas con experiencia en seguridad de redes y gestión de servidores a gran escala.",
                            GenderId = 1,
                            Name = "omar harris",
                            UrlImage = "https://tse3.mm.bing.net/th?id=OIG3.cKPpvOrNYcEWjI.dS6vw&pid=ImgGn"
                        },
                        new
                        {
                            Id = 19,
                            Birthday = new DateTime(1996, 6, 21, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrolladora web especializada en front-end y diseño ux. experta en crear sitios web dinámicos y mejorar la experiencia del usuario.",
                            GenderId = 2,
                            Name = "julia patel",
                            UrlImage = "https://tse2.mm.bing.net/th?id=OIG4.co0F_z3mYCkQ.RjY69sX&pid=ImgGn"
                        },
                        new
                        {
                            Id = 20,
                            Birthday = new DateTime(1992, 12, 2, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "ingeniero en la nube con experiencia en aws y azure. experto en diseñar soluciones y optimizar infraestructura en la nube.",
                            GenderId = 1,
                            Name = "antonio martinez",
                            UrlImage = "https://tse3.mm.bing.net/th?id=OIG3.YXT9SEBhS2aviUM5zMrC&pid=ImgGn"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("CoderLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoderId = 1,
                            LanguageId = 1,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 2,
                            CoderId = 1,
                            LanguageId = 3,
                            LanguageLevelId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoderId = 2,
                            LanguageId = 2,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 4,
                            CoderId = 3,
                            LanguageId = 1,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 5,
                            CoderId = 4,
                            LanguageId = 3,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 6,
                            CoderId = 5,
                            LanguageId = 2,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 7,
                            CoderId = 6,
                            LanguageId = 1,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 8,
                            CoderId = 7,
                            LanguageId = 3,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 9,
                            CoderId = 8,
                            LanguageId = 2,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 10,
                            CoderId = 9,
                            LanguageId = 1,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 11,
                            CoderId = 10,
                            LanguageId = 2,
                            LanguageLevelId = 6
                        },
                        new
                        {
                            Id = 12,
                            CoderId = 11,
                            LanguageId = 3,
                            LanguageLevelId = 1
                        },
                        new
                        {
                            Id = 13,
                            CoderId = 12,
                            LanguageId = 1,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 14,
                            CoderId = 13,
                            LanguageId = 2,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 15,
                            CoderId = 14,
                            LanguageId = 3,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 16,
                            CoderId = 15,
                            LanguageId = 1,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 17,
                            CoderId = 16,
                            LanguageId = 2,
                            LanguageLevelId = 6
                        },
                        new
                        {
                            Id = 18,
                            CoderId = 17,
                            LanguageId = 3,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 19,
                            CoderId = 18,
                            LanguageId = 1,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 20,
                            CoderId = 19,
                            LanguageId = 2,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 21,
                            CoderId = 20,
                            LanguageId = 3,
                            LanguageLevelId = 4
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderSoftSkill", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("SoftSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("CoderId", "SoftSkillId");

                    b.HasIndex("SoftSkillId");

                    b.ToTable("CoderSoftSkills");

                    b.HasData(
                        new
                        {
                            CoderId = 1,
                            SoftSkillId = 1,
                            Id = 1
                        },
                        new
                        {
                            CoderId = 1,
                            SoftSkillId = 3,
                            Id = 2
                        },
                        new
                        {
                            CoderId = 2,
                            SoftSkillId = 2,
                            Id = 3
                        },
                        new
                        {
                            CoderId = 3,
                            SoftSkillId = 3,
                            Id = 4
                        },
                        new
                        {
                            CoderId = 4,
                            SoftSkillId = 1,
                            Id = 5
                        },
                        new
                        {
                            CoderId = 5,
                            SoftSkillId = 2,
                            Id = 6
                        },
                        new
                        {
                            CoderId = 6,
                            SoftSkillId = 3,
                            Id = 7
                        },
                        new
                        {
                            CoderId = 7,
                            SoftSkillId = 1,
                            Id = 8
                        },
                        new
                        {
                            CoderId = 8,
                            SoftSkillId = 2,
                            Id = 9
                        },
                        new
                        {
                            CoderId = 9,
                            SoftSkillId = 3,
                            Id = 10
                        },
                        new
                        {
                            CoderId = 10,
                            SoftSkillId = 1,
                            Id = 11
                        },
                        new
                        {
                            CoderId = 11,
                            SoftSkillId = 2,
                            Id = 12
                        },
                        new
                        {
                            CoderId = 12,
                            SoftSkillId = 3,
                            Id = 13
                        },
                        new
                        {
                            CoderId = 13,
                            SoftSkillId = 1,
                            Id = 14
                        },
                        new
                        {
                            CoderId = 14,
                            SoftSkillId = 2,
                            Id = 15
                        },
                        new
                        {
                            CoderId = 15,
                            SoftSkillId = 3,
                            Id = 16
                        },
                        new
                        {
                            CoderId = 16,
                            SoftSkillId = 1,
                            Id = 17
                        },
                        new
                        {
                            CoderId = 17,
                            SoftSkillId = 2,
                            Id = 18
                        },
                        new
                        {
                            CoderId = 18,
                            SoftSkillId = 3,
                            Id = 19
                        },
                        new
                        {
                            CoderId = 19,
                            SoftSkillId = 1,
                            Id = 20
                        },
                        new
                        {
                            CoderId = 20,
                            SoftSkillId = 2,
                            Id = 21
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderTechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalSkillLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoderId");

                    b.HasIndex("TechnicalSkillId");

                    b.HasIndex("TechnicalSkillLevelId");

                    b.ToTable("CoderTechnicalSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoderId = 1,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 2,
                            CoderId = 1,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoderId = 2,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 4,
                            CoderId = 3,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 5,
                            CoderId = 4,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 6,
                            CoderId = 5,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 7,
                            CoderId = 6,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 8,
                            CoderId = 7,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 9,
                            CoderId = 8,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 10,
                            CoderId = 9,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 11,
                            CoderId = 10,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 12,
                            CoderId = 11,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 13,
                            CoderId = 12,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 14,
                            CoderId = 13,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 15,
                            CoderId = 14,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 16,
                            CoderId = 15,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 17,
                            CoderId = 16,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 18,
                            CoderId = 17,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 19,
                            CoderId = 18,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 20,
                            CoderId = 19,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 21,
                            CoderId = 20,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "masculino"
                        },
                        new
                        {
                            Id = 2,
                            Name = "femenino"
                        },
                        new
                        {
                            Id = 3,
                            Name = "prefiero no indicarlo"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "inglés"
                        },
                        new
                        {
                            Id = 2,
                            Name = "español"
                        },
                        new
                        {
                            Id = 3,
                            Name = "francés"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "a1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "a2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "b1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "b2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "c1"
                        },
                        new
                        {
                            Id = 6,
                            Name = "c2"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tecnología"
                        },
                        new
                        {
                            Id = 2,
                            Name = "finanzas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "salud"
                        },
                        new
                        {
                            Id = 4,
                            Name = "educación"
                        },
                        new
                        {
                            Id = 5,
                            Name = "manufactura"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.SoftSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SoftSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "comunicación"
                        },
                        new
                        {
                            Id = 2,
                            Name = "resolución de problemas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "liderazgo"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "java"
                        },
                        new
                        {
                            Id = 2,
                            Name = "c#"
                        },
                        new
                        {
                            Id = 3,
                            Name = "nextJs"
                        },
                        new
                        {
                            Id = 4,
                            Name = "nodeJs"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkillLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "junior"
                        },
                        new
                        {
                            Id = 2,
                            Name = "semi-senior"
                        },
                        new
                        {
                            Id = 3,
                            Name = "senior"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("SectorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SectorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "jackeline.cardona@example.com",
                            IsConfirmed = true,
                            Name = "jackeline cardona",
                            PasswordHash = new byte[] { 155, 93, 236, 60, 78, 112, 252, 184, 11, 242, 87, 51, 142, 154, 154, 76, 168, 243, 48, 24, 252, 124, 106, 131, 10, 86, 137, 157, 94, 182, 184, 163, 142, 157, 53, 154, 178, 155, 185, 39, 178, 184, 157, 188, 13, 236, 154, 33, 167, 117, 116, 248, 29, 223, 212, 82, 40, 207, 66, 213, 118, 56, 74, 192 },
                            PasswordSalt = new byte[] { 46, 17, 22, 39, 66, 97, 5, 42, 139, 135, 212, 66, 118, 150, 57, 42, 173, 171, 240, 190, 63, 35, 231, 200, 227, 8, 138, 185, 167, 170, 159, 225, 253, 125, 133, 25, 138, 233, 50, 226, 227, 40, 105, 74, 9, 132, 199, 147, 143, 101, 27, 177, 149, 71, 44, 85, 61, 189, 214, 110, 78, 49, 132, 178, 239, 196, 151, 208, 125, 219, 181, 64, 141, 234, 178, 189, 60, 136, 63, 248, 172, 65, 202, 238, 254, 232, 83, 202, 10, 75, 95, 74, 146, 50, 126, 119, 123, 247, 193, 94, 206, 22, 42, 188, 92, 36, 194, 38, 202, 16, 124, 94, 165, 147, 45, 121, 231, 230, 67, 151, 215, 110, 124, 170, 43, 117, 246, 27 },
                            PhoneNumber = "1234567890",
                            RoleId = 1,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "jane.smith@example.com",
                            IsConfirmed = true,
                            Name = "jane smith",
                            PasswordHash = new byte[] { 185, 19, 90, 121, 22, 144, 165, 109, 51, 187, 135, 242, 231, 25, 41, 135, 226, 76, 214, 97, 187, 255, 57, 240, 150, 112, 90, 151, 102, 82, 247, 15, 63, 215, 205, 67, 211, 216, 208, 192, 137, 175, 101, 21, 165, 222, 113, 136, 214, 227, 171, 67, 142, 226, 71, 221, 224, 143, 185, 57, 111, 191, 172, 124 },
                            PasswordSalt = new byte[] { 198, 248, 8, 131, 243, 11, 232, 22, 48, 237, 212, 204, 45, 154, 131, 142, 106, 18, 135, 81, 159, 235, 92, 58, 212, 81, 107, 199, 227, 58, 136, 5, 175, 155, 7, 28, 231, 138, 152, 160, 155, 192, 182, 24, 241, 174, 45, 200, 23, 136, 95, 189, 201, 254, 140, 10, 217, 107, 152, 30, 10, 177, 160, 80, 147, 160, 10, 139, 109, 250, 131, 153, 113, 206, 113, 79, 4, 109, 142, 58, 103, 143, 214, 67, 59, 70, 116, 220, 162, 246, 159, 115, 16, 193, 28, 68, 67, 79, 9, 122, 62, 41, 52, 59, 61, 22, 57, 215, 193, 234, 187, 166, 228, 20, 28, 1, 246, 185, 32, 155, 117, 124, 60, 119, 184, 184, 57, 110 },
                            PhoneNumber = "2345678901",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "alice.johnson@example.com",
                            IsConfirmed = true,
                            Name = "alice johnson",
                            PasswordHash = new byte[] { 53, 77, 251, 183, 109, 22, 198, 148, 244, 194, 245, 108, 2, 149, 179, 20, 76, 175, 55, 97, 224, 6, 3, 19, 22, 124, 166, 22, 246, 206, 156, 59, 199, 101, 231, 115, 139, 61, 179, 122, 65, 227, 119, 72, 189, 190, 149, 225, 200, 165, 78, 216, 21, 70, 207, 212, 254, 0, 165, 31, 157, 35, 92, 43 },
                            PasswordSalt = new byte[] { 228, 204, 79, 154, 161, 218, 164, 61, 23, 239, 176, 21, 73, 43, 225, 85, 27, 176, 215, 71, 70, 207, 110, 200, 43, 87, 176, 188, 144, 134, 101, 3, 57, 167, 61, 109, 232, 121, 190, 74, 216, 183, 205, 231, 250, 80, 41, 20, 216, 43, 178, 68, 236, 50, 189, 137, 201, 4, 199, 35, 192, 194, 129, 16, 10, 243, 127, 143, 58, 217, 3, 210, 215, 74, 192, 47, 90, 38, 11, 125, 155, 82, 205, 54, 36, 117, 215, 54, 144, 154, 29, 6, 36, 179, 200, 17, 146, 244, 101, 74, 62, 66, 110, 77, 129, 71, 250, 136, 10, 11, 56, 104, 43, 178, 176, 185, 147, 250, 154, 104, 67, 25, 241, 173, 221, 77, 53, 6 },
                            PhoneNumber = "3456789012",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 6, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "bob.williams@example.com",
                            IsConfirmed = true,
                            Name = "bob williams",
                            PasswordHash = new byte[] { 153, 22, 254, 131, 42, 124, 104, 108, 35, 171, 142, 94, 78, 213, 39, 203, 42, 63, 86, 91, 157, 81, 139, 30, 151, 29, 39, 106, 56, 190, 246, 68, 9, 90, 57, 55, 235, 117, 48, 23, 84, 25, 57, 156, 201, 147, 107, 157, 198, 232, 203, 97, 250, 75, 250, 136, 165, 68, 27, 105, 132, 175, 182, 66 },
                            PasswordSalt = new byte[] { 174, 222, 228, 130, 185, 223, 113, 203, 161, 249, 203, 224, 204, 108, 196, 203, 177, 71, 116, 124, 152, 66, 41, 168, 229, 202, 214, 46, 105, 252, 54, 166, 254, 133, 87, 205, 237, 204, 42, 23, 186, 68, 212, 233, 222, 229, 112, 60, 143, 114, 111, 143, 238, 109, 201, 130, 36, 201, 57, 73, 184, 204, 82, 114, 67, 125, 109, 173, 85, 207, 54, 173, 185, 45, 116, 169, 178, 106, 242, 107, 89, 248, 0, 166, 62, 202, 39, 196, 112, 242, 151, 164, 224, 223, 172, 0, 45, 124, 83, 55, 88, 233, 21, 255, 133, 223, 81, 29, 188, 26, 110, 114, 112, 221, 88, 43, 191, 247, 178, 126, 173, 205, 113, 154, 62, 110, 194, 162 },
                            PhoneNumber = "4567890123",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "charlie.brown@example.com",
                            IsConfirmed = true,
                            Name = "charlie brown",
                            PasswordHash = new byte[] { 50, 128, 204, 201, 222, 89, 144, 169, 236, 42, 173, 20, 17, 127, 35, 70, 147, 142, 77, 222, 115, 57, 146, 113, 197, 163, 253, 80, 147, 157, 126, 204, 206, 32, 170, 94, 37, 230, 35, 54, 134, 229, 164, 251, 106, 185, 156, 218, 46, 100, 10, 94, 66, 80, 23, 203, 49, 141, 160, 78, 253, 164, 88, 13 },
                            PasswordSalt = new byte[] { 63, 120, 131, 201, 168, 126, 187, 183, 247, 226, 102, 141, 45, 113, 11, 7, 109, 95, 167, 164, 92, 159, 79, 0, 169, 76, 57, 243, 161, 249, 126, 64, 163, 182, 245, 210, 216, 163, 25, 24, 178, 191, 130, 70, 15, 100, 113, 161, 18, 184, 106, 149, 56, 16, 77, 97, 70, 143, 240, 213, 33, 222, 248, 47, 79, 182, 115, 71, 185, 150, 245, 32, 253, 172, 82, 152, 64, 210, 120, 10, 249, 88, 70, 142, 147, 45, 188, 83, 57, 42, 153, 45, 139, 9, 77, 38, 174, 115, 3, 195, 182, 132, 244, 46, 86, 145, 69, 89, 89, 141, 57, 202, 234, 211, 90, 165, 193, 61, 201, 236, 100, 249, 218, 172, 91, 86, 162, 235 },
                            PhoneNumber = "5678901234",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "diana.clark@example.com",
                            IsConfirmed = true,
                            Name = "diana clark",
                            PasswordHash = new byte[] { 197, 91, 220, 103, 231, 184, 87, 181, 223, 43, 209, 8, 250, 252, 40, 63, 188, 93, 155, 48, 230, 226, 254, 55, 244, 189, 132, 221, 140, 183, 173, 140, 42, 145, 95, 23, 89, 10, 108, 110, 10, 32, 83, 52, 72, 122, 165, 46, 185, 213, 58, 232, 123, 78, 113, 156, 80, 139, 173, 149, 254, 221, 151, 228 },
                            PasswordSalt = new byte[] { 122, 167, 76, 198, 27, 164, 176, 168, 152, 107, 78, 44, 174, 79, 23, 48, 127, 226, 135, 216, 82, 5, 33, 109, 34, 191, 198, 153, 125, 225, 230, 210, 135, 82, 252, 187, 157, 162, 185, 29, 94, 254, 53, 240, 173, 155, 120, 106, 239, 47, 226, 142, 76, 238, 66, 227, 213, 125, 110, 12, 189, 2, 65, 37, 157, 246, 110, 6, 197, 38, 196, 32, 27, 186, 235, 38, 39, 22, 230, 142, 210, 141, 43, 183, 240, 165, 51, 226, 133, 254, 143, 128, 250, 83, 35, 3, 120, 5, 254, 253, 33, 0, 72, 140, 153, 238, 54, 212, 182, 3, 232, 96, 247, 20, 233, 158, 134, 100, 61, 245, 5, 70, 106, 56, 181, 148, 101, 140 },
                            PhoneNumber = "6789012345",
                            RoleId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "edward.davis@example.com",
                            IsConfirmed = true,
                            Name = "edward davis",
                            PasswordHash = new byte[] { 130, 125, 79, 76, 70, 120, 161, 190, 66, 55, 116, 175, 91, 139, 157, 69, 200, 191, 85, 247, 5, 115, 37, 124, 38, 226, 63, 253, 249, 87, 6, 154, 21, 92, 114, 74, 80, 163, 254, 135, 56, 31, 225, 106, 240, 111, 141, 193, 5, 233, 142, 48, 117, 80, 78, 223, 140, 24, 87, 205, 179, 79, 163, 33 },
                            PasswordSalt = new byte[] { 100, 215, 210, 80, 30, 151, 213, 166, 62, 153, 66, 190, 10, 34, 113, 33, 34, 243, 128, 38, 186, 118, 49, 123, 146, 146, 240, 65, 39, 0, 122, 73, 78, 201, 1, 34, 183, 123, 94, 254, 82, 121, 142, 21, 220, 220, 238, 85, 144, 98, 180, 201, 242, 242, 206, 179, 168, 103, 251, 152, 79, 118, 103, 23, 252, 90, 82, 234, 106, 192, 252, 86, 159, 39, 70, 99, 180, 12, 34, 161, 80, 10, 60, 40, 23, 94, 238, 130, 159, 173, 106, 67, 129, 221, 158, 87, 187, 156, 76, 194, 251, 127, 75, 213, 122, 176, 250, 82, 163, 114, 88, 188, 169, 25, 7, 134, 2, 240, 12, 134, 16, 89, 64, 43, 38, 203, 111, 185 },
                            PhoneNumber = "7890123456",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 6, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "fiona.evans@example.com",
                            IsConfirmed = true,
                            Name = "fiona evans",
                            PasswordHash = new byte[] { 211, 62, 6, 173, 128, 69, 106, 148, 177, 125, 119, 87, 71, 74, 136, 246, 233, 117, 100, 196, 57, 164, 195, 159, 222, 10, 83, 183, 226, 252, 14, 75, 233, 165, 245, 84, 33, 4, 124, 59, 15, 3, 246, 89, 98, 98, 194, 204, 202, 45, 247, 73, 133, 146, 68, 152, 110, 83, 206, 74, 151, 133, 52, 205 },
                            PasswordSalt = new byte[] { 238, 211, 4, 64, 38, 230, 209, 191, 236, 246, 3, 6, 71, 131, 242, 128, 240, 237, 183, 188, 99, 136, 70, 58, 220, 64, 226, 46, 178, 178, 87, 28, 235, 129, 153, 235, 68, 74, 49, 28, 246, 210, 24, 191, 114, 171, 197, 249, 42, 53, 202, 227, 244, 164, 195, 120, 15, 62, 48, 173, 108, 80, 29, 89, 126, 67, 95, 10, 95, 115, 54, 229, 176, 19, 181, 207, 14, 250, 183, 43, 215, 138, 64, 245, 60, 211, 56, 254, 119, 188, 32, 99, 219, 50, 136, 247, 167, 194, 51, 66, 179, 138, 29, 190, 78, 113, 52, 137, 182, 50, 168, 88, 104, 95, 54, 172, 212, 100, 60, 209, 194, 236, 3, 237, 24, 23, 15, 56 },
                            PhoneNumber = "8901234567",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "george.fisher@example.com",
                            IsConfirmed = true,
                            Name = "george fisher",
                            PasswordHash = new byte[] { 226, 217, 0, 212, 238, 202, 203, 20, 131, 143, 196, 69, 11, 185, 111, 98, 124, 245, 215, 192, 230, 142, 233, 135, 176, 92, 201, 67, 194, 237, 225, 143, 60, 32, 210, 98, 4, 185, 201, 211, 42, 237, 135, 39, 60, 170, 111, 254, 224, 231, 146, 88, 210, 21, 254, 120, 137, 10, 148, 63, 219, 175, 138, 4 },
                            PasswordSalt = new byte[] { 35, 148, 242, 172, 1, 66, 169, 49, 248, 110, 83, 155, 213, 194, 10, 99, 21, 123, 152, 78, 53, 248, 157, 227, 45, 11, 210, 30, 38, 67, 52, 71, 137, 102, 94, 243, 8, 154, 245, 242, 191, 125, 166, 55, 243, 115, 228, 116, 4, 180, 120, 204, 173, 244, 117, 238, 248, 28, 40, 127, 15, 123, 221, 162, 166, 31, 107, 67, 36, 113, 79, 60, 48, 58, 20, 90, 202, 132, 164, 207, 238, 210, 161, 215, 114, 219, 3, 114, 229, 200, 254, 224, 18, 45, 112, 78, 216, 138, 64, 44, 26, 88, 42, 153, 8, 222, 152, 71, 243, 154, 203, 237, 163, 89, 209, 236, 90, 77, 161, 141, 19, 167, 197, 241, 57, 65, 35, 68 },
                            PhoneNumber = "9012345678",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "hannah.green@example.com",
                            IsConfirmed = true,
                            Name = "hannah green",
                            PasswordHash = new byte[] { 176, 197, 21, 79, 40, 42, 172, 112, 110, 190, 223, 171, 152, 189, 78, 52, 32, 216, 134, 119, 144, 191, 16, 130, 231, 190, 62, 234, 131, 145, 78, 195, 43, 172, 137, 143, 233, 88, 47, 45, 140, 25, 92, 122, 32, 175, 183, 53, 91, 194, 16, 49, 147, 125, 255, 76, 225, 214, 190, 60, 47, 221, 34, 147 },
                            PasswordSalt = new byte[] { 127, 200, 214, 149, 220, 145, 157, 143, 175, 193, 249, 41, 151, 180, 212, 116, 213, 224, 86, 169, 110, 89, 37, 216, 42, 168, 62, 201, 156, 241, 89, 100, 165, 109, 243, 169, 124, 93, 185, 93, 226, 31, 62, 207, 186, 147, 185, 169, 149, 126, 123, 28, 157, 204, 235, 169, 212, 123, 60, 174, 79, 13, 130, 47, 7, 188, 230, 133, 242, 111, 204, 160, 87, 2, 134, 220, 110, 99, 64, 208, 197, 195, 124, 32, 63, 63, 89, 10, 14, 134, 239, 12, 43, 224, 232, 65, 137, 58, 115, 21, 219, 112, 57, 188, 12, 55, 198, 223, 252, 37, 144, 243, 48, 67, 161, 79, 210, 210, 54, 229, 246, 99, 138, 168, 130, 211, 1, 178 },
                            PhoneNumber = "0123456789",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 8, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "isaac.lewis@example.com",
                            IsConfirmed = true,
                            Name = "isaac lewis",
                            PasswordHash = new byte[] { 145, 64, 127, 6, 73, 240, 58, 141, 186, 196, 184, 133, 68, 236, 15, 119, 40, 214, 21, 148, 223, 86, 14, 203, 150, 8, 226, 198, 207, 200, 179, 223, 4, 11, 45, 116, 34, 68, 233, 16, 15, 72, 202, 229, 184, 167, 41, 116, 11, 212, 10, 96, 226, 103, 136, 119, 174, 192, 127, 2, 134, 108, 51, 3 },
                            PasswordSalt = new byte[] { 204, 88, 106, 217, 36, 21, 228, 226, 164, 198, 103, 148, 209, 145, 86, 142, 64, 1, 41, 184, 93, 124, 25, 69, 229, 162, 41, 139, 155, 221, 0, 120, 100, 56, 4, 161, 226, 227, 197, 109, 183, 42, 132, 205, 203, 218, 183, 28, 213, 31, 76, 243, 137, 55, 249, 184, 23, 190, 77, 243, 194, 247, 42, 6, 72, 57, 93, 174, 87, 68, 15, 249, 208, 207, 18, 74, 50, 76, 10, 160, 104, 79, 191, 194, 252, 153, 72, 80, 245, 223, 174, 97, 215, 246, 200, 198, 221, 42, 129, 151, 184, 164, 211, 41, 164, 48, 164, 83, 168, 11, 41, 205, 226, 37, 134, 242, 52, 168, 52, 239, 87, 228, 205, 112, 156, 140, 137, 176 },
                            PhoneNumber = "1234567891",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 6, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "julia.martinez@example.com",
                            IsConfirmed = true,
                            Name = "julia martinez",
                            PasswordHash = new byte[] { 16, 73, 129, 95, 64, 187, 207, 216, 161, 23, 149, 212, 18, 144, 98, 158, 47, 124, 17, 44, 234, 144, 239, 186, 11, 195, 231, 33, 243, 140, 177, 91, 156, 120, 213, 144, 187, 150, 205, 31, 210, 71, 27, 188, 213, 131, 23, 129, 173, 30, 117, 201, 94, 250, 212, 67, 91, 127, 25, 0, 105, 179, 222, 197 },
                            PasswordSalt = new byte[] { 13, 7, 238, 190, 170, 15, 36, 238, 32, 87, 99, 200, 156, 44, 220, 185, 151, 214, 162, 69, 90, 52, 83, 25, 208, 246, 187, 189, 205, 158, 245, 207, 127, 120, 1, 162, 229, 121, 204, 181, 112, 9, 170, 150, 242, 204, 19, 99, 54, 84, 173, 143, 67, 206, 242, 103, 30, 125, 6, 40, 19, 170, 243, 250, 173, 66, 111, 125, 70, 168, 41, 145, 248, 116, 166, 86, 106, 251, 41, 112, 182, 80, 110, 103, 176, 225, 64, 231, 122, 190, 126, 14, 161, 39, 108, 147, 222, 205, 126, 78, 140, 246, 108, 67, 203, 118, 120, 85, 212, 226, 173, 182, 170, 26, 149, 232, 172, 224, 225, 31, 10, 134, 31, 50, 225, 38, 124, 232 },
                            PhoneNumber = "2345678902",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 7, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "kyle.wilson@example.com",
                            IsConfirmed = true,
                            Name = "kyle wilson",
                            PasswordHash = new byte[] { 18, 201, 69, 89, 55, 78, 196, 128, 32, 233, 19, 205, 93, 12, 65, 167, 183, 48, 47, 54, 128, 128, 77, 123, 163, 177, 200, 133, 203, 243, 22, 41, 184, 184, 36, 241, 211, 24, 132, 41, 147, 96, 204, 159, 96, 77, 255, 74, 209, 86, 130, 120, 44, 233, 23, 155, 83, 76, 26, 28, 168, 202, 52, 147 },
                            PasswordSalt = new byte[] { 70, 29, 242, 3, 189, 157, 134, 133, 153, 110, 72, 178, 89, 247, 128, 128, 16, 79, 14, 221, 96, 212, 241, 57, 144, 53, 15, 243, 3, 147, 253, 178, 248, 132, 158, 17, 234, 115, 37, 120, 231, 198, 215, 219, 72, 5, 115, 107, 23, 119, 132, 212, 136, 166, 151, 165, 210, 231, 114, 75, 180, 176, 38, 24, 148, 40, 180, 161, 233, 133, 236, 238, 23, 21, 239, 166, 18, 216, 107, 105, 122, 245, 253, 8, 239, 226, 220, 218, 244, 6, 243, 31, 70, 175, 80, 235, 138, 159, 230, 47, 85, 50, 158, 183, 152, 135, 48, 192, 86, 195, 181, 212, 151, 131, 10, 250, 80, 147, 145, 140, 29, 63, 96, 131, 164, 247, 96, 151 },
                            PhoneNumber = "3456789013",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 9, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "laura.johnson@example.com",
                            IsConfirmed = true,
                            Name = "laura johnson",
                            PasswordHash = new byte[] { 152, 210, 104, 227, 174, 179, 211, 104, 48, 177, 33, 187, 72, 47, 86, 209, 38, 117, 4, 169, 63, 32, 61, 22, 205, 231, 116, 72, 117, 53, 106, 163, 28, 32, 190, 201, 166, 235, 148, 225, 205, 72, 247, 164, 56, 76, 119, 145, 140, 48, 179, 200, 33, 73, 51, 33, 215, 128, 67, 227, 6, 204, 58, 17 },
                            PasswordSalt = new byte[] { 239, 102, 7, 175, 147, 164, 73, 184, 213, 129, 69, 14, 242, 69, 98, 9, 59, 103, 224, 154, 7, 161, 197, 154, 94, 6, 161, 177, 20, 84, 227, 67, 187, 77, 197, 16, 219, 81, 36, 100, 106, 148, 82, 108, 8, 75, 37, 89, 39, 30, 87, 235, 107, 32, 111, 114, 217, 143, 33, 120, 130, 55, 171, 35, 25, 126, 249, 124, 142, 33, 63, 82, 65, 35, 157, 139, 20, 134, 23, 61, 22, 81, 202, 39, 244, 131, 190, 72, 145, 204, 7, 254, 5, 174, 251, 122, 101, 217, 10, 0, 234, 231, 41, 226, 91, 7, 198, 85, 20, 80, 217, 21, 52, 25, 191, 76, 1, 93, 63, 131, 170, 191, 188, 178, 153, 2, 171, 210 },
                            PhoneNumber = "4567890124",
                            RoleId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 7, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "michael.brown@example.com",
                            IsConfirmed = true,
                            Name = "michael brown",
                            PasswordHash = new byte[] { 19, 210, 202, 87, 105, 172, 48, 110, 216, 236, 25, 160, 197, 80, 7, 242, 84, 161, 174, 215, 103, 226, 156, 250, 176, 62, 152, 60, 57, 168, 220, 187, 236, 231, 146, 112, 75, 239, 229, 26, 220, 181, 218, 6, 50, 115, 18, 114, 133, 240, 207, 125, 107, 21, 244, 141, 55, 36, 192, 23, 64, 228, 197, 180 },
                            PasswordSalt = new byte[] { 50, 114, 215, 130, 99, 47, 160, 16, 133, 85, 239, 236, 213, 144, 198, 221, 244, 166, 73, 191, 185, 85, 204, 17, 61, 227, 158, 208, 136, 27, 163, 232, 253, 193, 57, 247, 19, 176, 224, 52, 138, 12, 168, 34, 157, 26, 31, 243, 217, 247, 24, 210, 149, 81, 223, 98, 60, 56, 76, 17, 14, 97, 158, 49, 104, 26, 199, 255, 189, 93, 117, 55, 87, 96, 173, 20, 85, 59, 111, 49, 71, 139, 61, 101, 248, 48, 89, 56, 104, 230, 66, 145, 243, 39, 16, 244, 48, 200, 90, 4, 97, 65, 203, 92, 6, 126, 155, 211, 116, 53, 217, 124, 37, 198, 250, 245, 235, 204, 40, 92, 182, 98, 147, 35, 125, 121, 223, 190 },
                            PhoneNumber = "5678901235",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "natalie.moore@example.com",
                            IsConfirmed = true,
                            Name = "natalie moore",
                            PasswordHash = new byte[] { 112, 110, 125, 93, 226, 255, 252, 215, 14, 79, 187, 27, 251, 217, 15, 3, 150, 126, 199, 237, 173, 28, 40, 210, 137, 1, 29, 19, 248, 17, 115, 247, 113, 116, 207, 195, 34, 248, 192, 0, 152, 99, 63, 207, 53, 12, 95, 215, 244, 0, 163, 142, 20, 248, 245, 172, 124, 0, 68, 186, 75, 250, 226, 98 },
                            PasswordSalt = new byte[] { 232, 74, 16, 98, 39, 149, 36, 148, 10, 139, 39, 251, 216, 120, 193, 216, 111, 249, 77, 77, 94, 114, 165, 213, 125, 174, 206, 237, 2, 129, 250, 17, 135, 130, 55, 191, 70, 220, 27, 86, 201, 252, 74, 17, 175, 167, 67, 169, 55, 175, 214, 70, 22, 217, 169, 87, 142, 120, 185, 95, 149, 226, 136, 179, 71, 132, 121, 123, 187, 54, 28, 219, 199, 202, 244, 237, 51, 12, 69, 151, 53, 80, 115, 109, 29, 172, 91, 6, 123, 122, 174, 12, 146, 107, 61, 47, 52, 103, 140, 172, 246, 30, 226, 115, 196, 157, 158, 169, 252, 116, 18, 135, 195, 107, 165, 146, 13, 65, 179, 119, 175, 183, 233, 103, 143, 79, 102, 109 },
                            PhoneNumber = "6789012346",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 8, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "oliver.taylor@example.com",
                            IsConfirmed = true,
                            Name = "oliver taylor",
                            PasswordHash = new byte[] { 238, 107, 165, 135, 54, 86, 177, 88, 187, 60, 78, 100, 170, 152, 60, 38, 34, 178, 189, 180, 30, 246, 80, 111, 9, 90, 36, 95, 40, 121, 88, 151, 203, 255, 90, 189, 108, 227, 235, 173, 12, 253, 41, 177, 228, 194, 146, 254, 169, 45, 154, 179, 229, 238, 91, 42, 61, 7, 66, 110, 156, 40, 116, 242 },
                            PasswordSalt = new byte[] { 124, 71, 229, 147, 121, 33, 176, 164, 89, 25, 33, 184, 244, 209, 20, 222, 9, 101, 38, 176, 150, 208, 69, 192, 241, 210, 102, 28, 246, 5, 211, 241, 139, 159, 165, 243, 218, 141, 174, 158, 233, 173, 151, 89, 99, 165, 139, 50, 122, 243, 126, 130, 13, 23, 135, 0, 177, 181, 182, 95, 143, 12, 107, 185, 132, 73, 250, 221, 77, 23, 139, 160, 151, 96, 83, 157, 222, 167, 165, 165, 45, 219, 194, 246, 125, 101, 24, 232, 19, 34, 177, 254, 239, 196, 99, 216, 134, 62, 117, 34, 224, 88, 129, 4, 88, 24, 252, 186, 45, 189, 249, 17, 32, 129, 192, 136, 69, 130, 168, 77, 218, 25, 49, 31, 44, 152, 139, 158 },
                            PhoneNumber = "7890123457",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 8, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "penelope.anderson@example.com",
                            IsConfirmed = true,
                            Name = "penelope anderson",
                            PasswordHash = new byte[] { 249, 24, 169, 168, 25, 174, 97, 57, 50, 249, 13, 133, 166, 59, 161, 158, 147, 1, 83, 124, 4, 73, 251, 251, 54, 154, 88, 220, 161, 72, 33, 116, 41, 224, 81, 13, 220, 220, 54, 46, 52, 207, 251, 123, 188, 161, 25, 251, 236, 167, 50, 7, 10, 241, 16, 29, 98, 128, 223, 71, 170, 100, 54, 226 },
                            PasswordSalt = new byte[] { 52, 66, 116, 119, 47, 70, 241, 14, 40, 97, 157, 112, 233, 128, 210, 181, 53, 196, 218, 98, 150, 186, 175, 170, 159, 185, 34, 6, 61, 64, 244, 149, 90, 148, 19, 115, 93, 134, 18, 85, 42, 114, 93, 160, 220, 55, 18, 227, 241, 158, 211, 223, 227, 118, 185, 51, 197, 4, 99, 124, 35, 77, 192, 67, 111, 2, 102, 228, 2, 245, 114, 160, 200, 169, 232, 66, 36, 20, 218, 223, 243, 21, 48, 211, 0, 228, 196, 133, 63, 10, 173, 252, 221, 205, 70, 7, 84, 70, 205, 147, 227, 21, 136, 124, 82, 91, 246, 170, 141, 241, 239, 165, 72, 139, 193, 138, 148, 94, 164, 221, 204, 106, 138, 201, 140, 238, 43, 197 },
                            PhoneNumber = "8901234568",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 8, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "quinn.harris@example.com",
                            IsConfirmed = true,
                            Name = "quinn harris",
                            PasswordHash = new byte[] { 149, 102, 224, 178, 43, 108, 156, 52, 75, 88, 248, 62, 184, 215, 255, 159, 228, 172, 174, 27, 212, 96, 189, 86, 154, 105, 62, 213, 91, 192, 76, 148, 156, 21, 6, 228, 98, 239, 211, 218, 76, 174, 216, 217, 139, 71, 135, 254, 158, 209, 43, 209, 194, 0, 70, 59, 88, 61, 177, 229, 71, 179, 250, 248 },
                            PasswordSalt = new byte[] { 219, 184, 136, 157, 201, 90, 45, 76, 58, 3, 59, 157, 55, 80, 73, 84, 76, 74, 103, 124, 233, 219, 179, 165, 203, 166, 211, 76, 201, 69, 126, 61, 58, 160, 99, 16, 255, 92, 131, 247, 174, 245, 243, 147, 75, 0, 209, 218, 194, 5, 254, 242, 66, 207, 186, 1, 48, 38, 163, 246, 255, 35, 33, 170, 31, 67, 147, 15, 16, 27, 115, 179, 15, 42, 63, 205, 112, 185, 29, 6, 246, 247, 186, 198, 125, 11, 24, 200, 186, 229, 3, 62, 175, 250, 242, 84, 177, 92, 70, 36, 66, 225, 146, 175, 237, 170, 251, 67, 94, 50, 27, 48, 92, 177, 250, 203, 44, 239, 202, 55, 132, 161, 45, 53, 170, 131, 208, 250 },
                            PhoneNumber = "9012345679",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 9, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "rachel.scott@example.com",
                            IsConfirmed = true,
                            Name = "rachel scott",
                            PasswordHash = new byte[] { 17, 219, 170, 236, 177, 48, 194, 198, 234, 224, 195, 40, 0, 63, 65, 101, 227, 133, 82, 162, 6, 27, 217, 94, 52, 5, 23, 188, 246, 37, 216, 253, 234, 152, 28, 132, 142, 4, 196, 163, 1, 181, 40, 231, 87, 25, 96, 0, 27, 245, 22, 247, 138, 173, 165, 63, 115, 243, 243, 56, 41, 118, 254, 102 },
                            PasswordSalt = new byte[] { 248, 130, 80, 59, 206, 96, 236, 100, 14, 37, 59, 191, 203, 125, 171, 91, 247, 118, 213, 55, 203, 81, 180, 226, 195, 193, 70, 225, 77, 180, 224, 91, 188, 203, 187, 239, 99, 211, 62, 227, 245, 168, 215, 99, 100, 10, 3, 77, 0, 79, 14, 1, 196, 95, 169, 202, 35, 188, 147, 43, 39, 130, 169, 78, 153, 90, 157, 142, 105, 62, 224, 133, 185, 42, 225, 125, 200, 138, 49, 44, 108, 119, 170, 92, 15, 190, 152, 131, 145, 202, 203, 232, 44, 144, 209, 176, 245, 86, 40, 127, 230, 105, 250, 184, 21, 72, 221, 101, 212, 153, 24, 41, 28, 168, 96, 70, 10, 227, 121, 76, 26, 29, 187, 141, 250, 208, 60, 195 },
                            PhoneNumber = "0123456790",
                            RoleId = 2,
                            SectorId = 4
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cliente"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Clan", "Clan")
                        .WithMany("Coders")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Gender", "Gender")
                        .WithMany("Coders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderLanguage", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Language", "Language")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.LanguageLevel", "LanguageLevel")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderSoftSkill", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderSoftSkills")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.SoftSkill", "SoftSkill")
                        .WithMany("CoderSoftSkills")
                        .HasForeignKey("SoftSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("SoftSkill");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderTechnicalSkill", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.TechnicalSkill", "TechnicalSkill")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("TechnicalSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", "TechnicalSkillLevel")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("TechnicalSkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("TechnicalSkill");

                    b.Navigation("TechnicalSkillLevel");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.User", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Sector", "Sector")
                        .WithMany("Users")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Clan", b =>
                {
                    b.Navigation("Coders");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.Navigation("CoderLanguages");

                    b.Navigation("CoderSoftSkills");

                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Gender", b =>
                {
                    b.Navigation("Coders");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Language", b =>
                {
                    b.Navigation("CoderLanguages");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.LanguageLevel", b =>
                {
                    b.Navigation("CoderLanguages");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Sector", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.SoftSkill", b =>
                {
                    b.Navigation("CoderSoftSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkill", b =>
                {
                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", b =>
                {
                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
