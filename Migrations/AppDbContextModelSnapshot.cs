// <auto-generated />
using System;
using Backend_Riwi_LinkUp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Linkup_ms.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Clans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "berners lee"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ritchie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "gates"
                        },
                        new
                        {
                            Id = 4,
                            Name = "jeff bezzos"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClanId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("GenderId");

                    b.ToTable("Coders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1997, 5, 22, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrollador de software con experiencia en diseño de soluciones digitales, modelado de datos y metodologías ágiles. me destaco en resolver problemas complejos y en comunicación efectiva.",
                            GenderId = 1,
                            Name = "edgar cardona",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQH22ztGRhoM2g/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1677008729241?e=1731542400&v=beta&t=89RVHJpVnq8_m5ObsEU3CEs0KVrBraYI4gGWdIEuXEM"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(2006, 9, 30, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrollador backend con aptitudes en c#, .net. especializado en aplicaciones del servidor e integración de api. buen trabajo en equipo y solucion de problemas",
                            GenderId = 1,
                            Name = "nicolas martinez",
                            UrlImage = "https://avatars.githubusercontent.com/u/164014608?v=4"
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1995, 3, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "actualmente, aprendo y aplico .net, typescript, react, next.js y sql, desarrollando habilidades en aplicaciones web y manejo de bases de datos.",
                            GenderId = 1,
                            Name = "brayan acosta",
                            UrlImage = "https://media.licdn.com/dms/image/v2/C4D03AQHAwWzaQDI6gw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1641180503207?e=1731542400&v=beta&t=A7lWrZBzJ84ZlLdFsvKA73tbZKdP1vfPGuvf3Ah6XH4"
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(2003, 7, 18, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "apasionado por crear y resolver problemas. me encanta aprender y enfrentar desafíos, compartir conocimientos y desarrollar soluciones innovadoras que impacten positivamente.",
                            GenderId = 1,
                            Name = "jose barreto",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQEqn-8BGpvfaw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1724345138906?e=1731542400&v=beta&t=wWL1nKrccb9DfJVg8Dz6v49L3AIpunv8gkovi5BpqgQ"
                        },
                        new
                        {
                            Id = 5,
                            Birthday = new DateTime(2002, 11, 5, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "desarrollador frontend con experiencia en react, typescript y next.js, creando aplicaciones web seguras, eficientes y con arquitectura modular.",
                            GenderId = 1,
                            Name = "juan arias",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQGXb8dGisr-wQ/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1724327950529?e=1731542400&v=beta&t=uCMHF7cJT2SfM-4acPddFycPWzAUYFWYr_WofvG2Cf8"
                        },
                        new
                        {
                            Id = 6,
                            Birthday = new DateTime(1997, 2, 28, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "científico de datos en aprendizaje automático y análisis de datos. experto en python, r y visualización de datos.",
                            GenderId = 1,
                            Name = "juan rojas",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQGyhYNRLL9edg/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1681701914743?e=1731542400&v=beta&t=0aYfJifoDREE5dhY4dCSD8IECOotdQqJ5HwtLfAKkxw"
                        },
                        new
                        {
                            Id = 7,
                            Birthday = new DateTime(1994, 6, 12, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "especialista en seguridad informática con experiencia en hacking ético y auditorías de seguridad de sistemas y datos.",
                            GenderId = 2,
                            Name = "ava martinez",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.KgiAsoOxSdFdiFJvih.W&pid=ImgGn"
                        },
                        new
                        {
                            Id = 8,
                            Birthday = new DateTime(1987, 10, 8, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrollador de videojuegos en unity y unreal engine. especializado en crear experiencias inmersivas y entornos interactivos.",
                            GenderId = 2,
                            Name = "noah anderson",
                            UrlImage = "https://tse3.mm.bing.net/th?id=OIG4.BdR6gNaEahI_dGinSr75&pid=ImgGn"
                        },
                        new
                        {
                            Id = 9,
                            Birthday = new DateTime(1996, 4, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrolladora de blockchain con experiencia en ethereum y solidity para contratos inteligentes y aplicaciones descentralizadas.",
                            GenderId = 2,
                            Name = "isabella white",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.xpBYsldYYgGJy_7if8T1&pid=ImgGn"
                        },
                        new
                        {
                            Id = 10,
                            Birthday = new DateTime(1990, 1, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "desarrollador full-stack con experiencia en javascript, node.js y frameworks web modernos. experto en desarrollo cliente y servidor.",
                            GenderId = 1,
                            Name = "alex johnson",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG3.zDCj3kinyaUjd0kHGTbh&pid=ImgGn"
                        },
                        new
                        {
                            Id = 11,
                            Birthday = new DateTime(1992, 7, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "ingeniera de software con experiencia en java y spring boot. enfocada en construir aplicaciones web escalables y código limpio.",
                            GenderId = 2,
                            Name = "maria gomez",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG4..woi4PcXMJrWci3PHx.1&pid=ImgGn"
                        },
                        new
                        {
                            Id = 12,
                            Birthday = new DateTime(1994, 8, 22, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "consultor devops con experiencia en automatización y servicios en la nube. experto en configurar pipelines ci/cd y gestionar infraestructura.",
                            GenderId = 1,
                            Name = "joseph kim",
                            UrlImage = "https://tse2.mm.bing.net/th?id=OIG3.g2nXDL0zV1p0rTcvZOHY&pid=ImgGn"
                        },
                        new
                        {
                            Id = 13,
                            Birthday = new DateTime(1989, 12, 30, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "diseñadora de productos con experiencia en investigación de usuarios y prototipado. experta en usabilidad y sistemas de diseño.",
                            GenderId = 1,
                            Name = "elena rodriguez",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.cxyneb3Z34jIy_OLnI45&pid=ImgGn"
                        },
                        new
                        {
                            Id = 14,
                            Birthday = new DateTime(1995, 11, 3, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "desarrollador backend especializado en arquitectura de microservicios y desarrollo de api en java y spring cloud.",
                            GenderId = 1,
                            Name = "luis fernandez",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG3.qynXeqPsRs8Lov_9_gIi&pid=ImgGn"
                        },
                        new
                        {
                            Id = 15,
                            Birthday = new DateTime(1991, 5, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "ingeniera front-end especializada en vue.js y diseño responsivo. experta en crear aplicaciones web dinámicas y accesibles.",
                            GenderId = 2,
                            Name = "natalie o'connor",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG4.wzqtcIUhErA8sGbNbu76&pid=ImgGn"
                        },
                        new
                        {
                            Id = 16,
                            Birthday = new DateTime(1990, 9, 17, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "analista de datos con habilidades en sql y herramientas de visualización como tableau. experto en extraer insights para decisiones.",
                            GenderId = 1,
                            Name = "damian lee",
                            UrlImage = "https://tse1.mm.bing.net/th?id=OIG3.5zeLHiPCO7K2Mh8UZoUG&pid=ImgGn"
                        },
                        new
                        {
                            Id = 17,
                            Birthday = new DateTime(1993, 4, 9, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "investigadora en inteligencia artificial con foco en procesamiento de lenguaje natural y algoritmos de aprendizaje automático.",
                            GenderId = 2,
                            Name = "zoe wilson",
                            UrlImage = "https://tse4.mm.bing.net/th?id=OIG4.dyXC5j5LkJq0TE_mtSMA&pid=ImgGn"
                        },
                        new
                        {
                            Id = 18,
                            Birthday = new DateTime(1988, 11, 18, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "administrador de sistemas con experiencia en seguridad de redes y gestión de servidores a gran escala.",
                            GenderId = 1,
                            Name = "omar harris",
                            UrlImage = "https://tse3.mm.bing.net/th?id=OIG3.cKPpvOrNYcEWjI.dS6vw&pid=ImgGn"
                        },
                        new
                        {
                            Id = 19,
                            Birthday = new DateTime(1996, 6, 21, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrolladora web especializada en front-end y diseño ux. experta en crear sitios web dinámicos y mejorar la experiencia del usuario.",
                            GenderId = 2,
                            Name = "julia patel",
                            UrlImage = "https://tse2.mm.bing.net/th?id=OIG4.co0F_z3mYCkQ.RjY69sX&pid=ImgGn"
                        },
                        new
                        {
                            Id = 20,
                            Birthday = new DateTime(1992, 12, 2, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "ingeniero en la nube con experiencia en aws y azure. experto en diseñar soluciones y optimizar infraestructura en la nube.",
                            GenderId = 1,
                            Name = "antonio martinez",
                            UrlImage = "https://tse3.mm.bing.net/th?id=OIG3.YXT9SEBhS2aviUM5zMrC&pid=ImgGn"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("CoderLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoderId = 1,
                            LanguageId = 1,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 2,
                            CoderId = 1,
                            LanguageId = 3,
                            LanguageLevelId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoderId = 2,
                            LanguageId = 2,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 4,
                            CoderId = 3,
                            LanguageId = 1,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 5,
                            CoderId = 4,
                            LanguageId = 3,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 6,
                            CoderId = 5,
                            LanguageId = 2,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 7,
                            CoderId = 6,
                            LanguageId = 1,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 8,
                            CoderId = 7,
                            LanguageId = 3,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 9,
                            CoderId = 8,
                            LanguageId = 2,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 10,
                            CoderId = 9,
                            LanguageId = 1,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 11,
                            CoderId = 10,
                            LanguageId = 2,
                            LanguageLevelId = 6
                        },
                        new
                        {
                            Id = 12,
                            CoderId = 11,
                            LanguageId = 3,
                            LanguageLevelId = 1
                        },
                        new
                        {
                            Id = 13,
                            CoderId = 12,
                            LanguageId = 1,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 14,
                            CoderId = 13,
                            LanguageId = 2,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 15,
                            CoderId = 14,
                            LanguageId = 3,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 16,
                            CoderId = 15,
                            LanguageId = 1,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 17,
                            CoderId = 16,
                            LanguageId = 2,
                            LanguageLevelId = 6
                        },
                        new
                        {
                            Id = 18,
                            CoderId = 17,
                            LanguageId = 3,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 19,
                            CoderId = 18,
                            LanguageId = 1,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 20,
                            CoderId = 19,
                            LanguageId = 2,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 21,
                            CoderId = 20,
                            LanguageId = 3,
                            LanguageLevelId = 4
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderSoftSkill", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("SoftSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("CoderId", "SoftSkillId");

                    b.HasIndex("SoftSkillId");

                    b.ToTable("CoderSoftSkills");

                    b.HasData(
                        new
                        {
                            CoderId = 1,
                            SoftSkillId = 1,
                            Id = 1
                        },
                        new
                        {
                            CoderId = 1,
                            SoftSkillId = 3,
                            Id = 2
                        },
                        new
                        {
                            CoderId = 2,
                            SoftSkillId = 2,
                            Id = 3
                        },
                        new
                        {
                            CoderId = 3,
                            SoftSkillId = 3,
                            Id = 4
                        },
                        new
                        {
                            CoderId = 4,
                            SoftSkillId = 1,
                            Id = 5
                        },
                        new
                        {
                            CoderId = 5,
                            SoftSkillId = 2,
                            Id = 6
                        },
                        new
                        {
                            CoderId = 6,
                            SoftSkillId = 3,
                            Id = 7
                        },
                        new
                        {
                            CoderId = 7,
                            SoftSkillId = 1,
                            Id = 8
                        },
                        new
                        {
                            CoderId = 8,
                            SoftSkillId = 2,
                            Id = 9
                        },
                        new
                        {
                            CoderId = 9,
                            SoftSkillId = 3,
                            Id = 10
                        },
                        new
                        {
                            CoderId = 10,
                            SoftSkillId = 1,
                            Id = 11
                        },
                        new
                        {
                            CoderId = 11,
                            SoftSkillId = 2,
                            Id = 12
                        },
                        new
                        {
                            CoderId = 12,
                            SoftSkillId = 3,
                            Id = 13
                        },
                        new
                        {
                            CoderId = 13,
                            SoftSkillId = 1,
                            Id = 14
                        },
                        new
                        {
                            CoderId = 14,
                            SoftSkillId = 2,
                            Id = 15
                        },
                        new
                        {
                            CoderId = 15,
                            SoftSkillId = 3,
                            Id = 16
                        },
                        new
                        {
                            CoderId = 16,
                            SoftSkillId = 1,
                            Id = 17
                        },
                        new
                        {
                            CoderId = 17,
                            SoftSkillId = 2,
                            Id = 18
                        },
                        new
                        {
                            CoderId = 18,
                            SoftSkillId = 3,
                            Id = 19
                        },
                        new
                        {
                            CoderId = 19,
                            SoftSkillId = 1,
                            Id = 20
                        },
                        new
                        {
                            CoderId = 20,
                            SoftSkillId = 2,
                            Id = 21
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderTechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalSkillLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoderId");

                    b.HasIndex("TechnicalSkillId");

                    b.HasIndex("TechnicalSkillLevelId");

                    b.ToTable("CoderTechnicalSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoderId = 1,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 2,
                            CoderId = 1,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoderId = 2,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 4,
                            CoderId = 3,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 5,
                            CoderId = 4,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 6,
                            CoderId = 5,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 7,
                            CoderId = 6,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 8,
                            CoderId = 7,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 9,
                            CoderId = 8,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 10,
                            CoderId = 9,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 11,
                            CoderId = 10,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 12,
                            CoderId = 11,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 13,
                            CoderId = 12,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 14,
                            CoderId = 13,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 15,
                            CoderId = 14,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 16,
                            CoderId = 15,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 17,
                            CoderId = 16,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 18,
                            CoderId = 17,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 19,
                            CoderId = 18,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 20,
                            CoderId = 19,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 21,
                            CoderId = 20,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "masculino"
                        },
                        new
                        {
                            Id = 2,
                            Name = "femenino"
                        },
                        new
                        {
                            Id = 3,
                            Name = "prefiero no indicarlo"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "inglés"
                        },
                        new
                        {
                            Id = 2,
                            Name = "español"
                        },
                        new
                        {
                            Id = 3,
                            Name = "francés"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "a1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "a2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "b1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "b2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "c1"
                        },
                        new
                        {
                            Id = 6,
                            Name = "c2"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sectors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tecnología"
                        },
                        new
                        {
                            Id = 2,
                            Name = "finanzas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "salud"
                        },
                        new
                        {
                            Id = 4,
                            Name = "educación"
                        },
                        new
                        {
                            Id = 5,
                            Name = "manufactura"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.SoftSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SoftSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "comunicación"
                        },
                        new
                        {
                            Id = 2,
                            Name = "resolución de problemas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "liderazgo"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "java"
                        },
                        new
                        {
                            Id = 2,
                            Name = "c#"
                        },
                        new
                        {
                            Id = 3,
                            Name = "nextJs"
                        },
                        new
                        {
                            Id = 4,
                            Name = "nodeJs"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkillLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "junior"
                        },
                        new
                        {
                            Id = 2,
                            Name = "semi-senior"
                        },
                        new
                        {
                            Id = 3,
                            Name = "senior"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("SectorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SectorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "jackeline.cardona@example.com",
                            IsConfirmed = true,
                            Name = "jackeline cardona",
                            PasswordHash = new byte[] { 126, 184, 161, 221, 100, 80, 55, 227, 156, 234, 229, 175, 84, 137, 14, 37, 172, 102, 27, 107, 32, 154, 246, 111, 112, 233, 163, 43, 119, 126, 249, 77, 136, 183, 179, 129, 106, 163, 87, 210, 173, 40, 110, 87, 9, 131, 93, 180, 57, 164, 131, 183, 99, 85, 128, 203, 22, 254, 34, 146, 242, 133, 104, 232 },
                            PasswordSalt = new byte[] { 243, 242, 6, 38, 130, 99, 179, 205, 106, 215, 178, 168, 36, 130, 31, 34, 168, 114, 141, 172, 104, 26, 77, 121, 3, 216, 108, 201, 173, 172, 169, 66, 73, 242, 167, 54, 124, 67, 80, 235, 114, 50, 62, 5, 230, 200, 49, 116, 251, 24, 37, 111, 80, 20, 111, 77, 14, 62, 170, 214, 86, 93, 37, 244, 58, 186, 16, 220, 96, 236, 54, 40, 192, 42, 225, 252, 71, 1, 221, 7, 62, 60, 159, 187, 75, 125, 88, 191, 91, 175, 18, 44, 29, 53, 47, 97, 10, 81, 222, 127, 170, 40, 227, 156, 229, 198, 144, 14, 163, 203, 51, 167, 243, 124, 54, 168, 180, 231, 215, 103, 36, 103, 140, 131, 92, 7, 153, 11 },
                            PhoneNumber = "1234567890",
                            RoleId = 1,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "jane.smith@example.com",
                            IsConfirmed = true,
                            Name = "jane smith",
                            PasswordHash = new byte[] { 61, 105, 8, 63, 95, 161, 87, 139, 181, 182, 14, 107, 248, 157, 137, 118, 134, 236, 237, 12, 31, 20, 99, 219, 242, 206, 8, 250, 74, 105, 67, 243, 207, 24, 211, 30, 35, 135, 33, 214, 229, 54, 110, 249, 228, 208, 131, 106, 74, 77, 230, 200, 10, 121, 49, 41, 75, 197, 51, 69, 156, 72, 181, 27 },
                            PasswordSalt = new byte[] { 21, 83, 226, 250, 91, 161, 247, 8, 152, 251, 41, 243, 177, 93, 225, 185, 166, 41, 66, 58, 29, 30, 53, 250, 85, 224, 47, 47, 196, 230, 195, 120, 250, 141, 128, 255, 233, 248, 128, 170, 47, 223, 38, 200, 163, 156, 24, 109, 200, 174, 78, 180, 254, 76, 133, 159, 223, 225, 160, 188, 252, 165, 134, 60, 171, 68, 226, 7, 179, 86, 104, 219, 167, 241, 21, 66, 125, 142, 108, 189, 182, 74, 62, 168, 40, 204, 155, 169, 20, 64, 94, 234, 94, 165, 254, 183, 249, 220, 94, 1, 115, 127, 98, 204, 151, 170, 139, 179, 164, 5, 136, 125, 54, 196, 49, 122, 216, 170, 90, 103, 9, 85, 18, 93, 202, 170, 178, 177 },
                            PhoneNumber = "2345678901",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "alice.johnson@example.com",
                            IsConfirmed = true,
                            Name = "alice johnson",
                            PasswordHash = new byte[] { 27, 23, 191, 112, 207, 52, 6, 157, 34, 183, 218, 189, 155, 123, 13, 159, 96, 169, 235, 94, 55, 26, 165, 122, 124, 179, 200, 11, 41, 239, 223, 164, 65, 177, 221, 163, 0, 111, 71, 0, 64, 95, 90, 191, 85, 53, 17, 172, 86, 36, 124, 81, 56, 72, 175, 155, 167, 62, 77, 226, 249, 2, 217, 8 },
                            PasswordSalt = new byte[] { 21, 46, 115, 253, 42, 113, 159, 56, 171, 73, 173, 187, 4, 52, 134, 23, 88, 249, 123, 11, 126, 122, 192, 140, 237, 236, 236, 95, 89, 221, 31, 154, 1, 40, 223, 246, 89, 90, 73, 231, 27, 0, 154, 28, 108, 243, 254, 247, 185, 217, 157, 73, 180, 40, 169, 206, 130, 69, 255, 113, 127, 153, 213, 195, 162, 35, 6, 111, 152, 89, 8, 132, 162, 38, 10, 115, 140, 101, 224, 178, 26, 177, 99, 42, 104, 175, 20, 13, 29, 199, 44, 32, 218, 5, 169, 63, 119, 68, 247, 77, 241, 182, 222, 55, 112, 41, 25, 199, 251, 249, 57, 240, 2, 34, 133, 107, 32, 188, 187, 210, 13, 118, 244, 150, 163, 121, 251, 214 },
                            PhoneNumber = "3456789012",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 6, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "bob.williams@example.com",
                            IsConfirmed = true,
                            Name = "bob williams",
                            PasswordHash = new byte[] { 102, 163, 34, 43, 80, 217, 245, 236, 202, 52, 183, 206, 14, 208, 134, 12, 250, 111, 108, 119, 129, 85, 186, 137, 90, 18, 150, 172, 154, 200, 2, 16, 77, 120, 246, 80, 237, 114, 176, 128, 198, 77, 127, 57, 23, 208, 214, 92, 145, 217, 242, 165, 199, 119, 203, 244, 39, 54, 93, 67, 55, 36, 113, 2 },
                            PasswordSalt = new byte[] { 198, 156, 217, 4, 226, 212, 188, 87, 192, 142, 234, 2, 24, 240, 11, 77, 94, 208, 89, 195, 254, 245, 139, 79, 62, 53, 200, 70, 201, 229, 238, 177, 221, 15, 89, 101, 116, 244, 218, 199, 211, 218, 182, 248, 107, 173, 107, 141, 33, 153, 239, 192, 143, 209, 240, 181, 136, 97, 40, 103, 165, 94, 121, 45, 144, 171, 29, 253, 167, 18, 23, 115, 146, 248, 128, 247, 229, 163, 77, 122, 12, 211, 176, 129, 247, 2, 169, 118, 223, 227, 73, 171, 65, 198, 220, 117, 78, 224, 156, 204, 253, 90, 85, 87, 0, 18, 223, 160, 56, 242, 121, 106, 161, 217, 61, 88, 207, 141, 254, 63, 242, 151, 222, 34, 112, 11, 92, 159 },
                            PhoneNumber = "4567890123",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "charlie.brown@example.com",
                            IsConfirmed = true,
                            Name = "charlie brown",
                            PasswordHash = new byte[] { 65, 140, 14, 152, 218, 6, 162, 239, 223, 67, 248, 239, 125, 128, 237, 164, 199, 227, 10, 105, 52, 209, 233, 250, 44, 37, 113, 206, 86, 8, 121, 145, 147, 58, 96, 177, 71, 11, 187, 197, 252, 178, 197, 100, 54, 22, 81, 244, 179, 108, 123, 112, 227, 169, 206, 232, 100, 20, 38, 119, 212, 55, 171, 14 },
                            PasswordSalt = new byte[] { 60, 22, 190, 204, 87, 85, 26, 77, 254, 175, 64, 111, 113, 71, 173, 109, 46, 127, 108, 174, 136, 17, 93, 1, 45, 83, 35, 218, 41, 45, 251, 194, 0, 114, 70, 75, 253, 183, 221, 59, 245, 19, 131, 63, 149, 169, 152, 180, 98, 96, 228, 201, 214, 209, 109, 95, 31, 249, 54, 148, 227, 13, 215, 16, 149, 183, 40, 21, 71, 54, 58, 98, 19, 105, 174, 4, 146, 38, 58, 84, 215, 243, 30, 211, 77, 131, 255, 135, 141, 217, 132, 11, 158, 240, 156, 72, 135, 44, 215, 65, 101, 255, 249, 146, 31, 188, 219, 243, 120, 78, 162, 152, 157, 12, 58, 201, 62, 251, 124, 208, 205, 236, 107, 249, 120, 253, 117, 215 },
                            PhoneNumber = "5678901234",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "diana.clark@example.com",
                            IsConfirmed = true,
                            Name = "diana clark",
                            PasswordHash = new byte[] { 62, 4, 165, 185, 117, 65, 2, 240, 207, 205, 14, 238, 97, 217, 122, 27, 78, 132, 48, 112, 185, 124, 211, 32, 154, 145, 240, 238, 235, 252, 134, 33, 144, 107, 136, 42, 165, 236, 154, 215, 40, 179, 143, 84, 202, 49, 117, 202, 45, 0, 117, 15, 51, 62, 12, 138, 224, 47, 253, 76, 93, 57, 223, 245 },
                            PasswordSalt = new byte[] { 162, 28, 249, 211, 36, 199, 127, 50, 5, 204, 22, 206, 201, 59, 202, 86, 101, 39, 176, 41, 45, 13, 246, 60, 148, 172, 144, 225, 43, 202, 178, 228, 97, 208, 102, 65, 145, 140, 169, 207, 93, 173, 172, 120, 24, 193, 60, 72, 7, 175, 116, 145, 72, 8, 109, 187, 206, 244, 147, 253, 91, 17, 220, 148, 183, 70, 80, 241, 52, 194, 62, 135, 183, 237, 82, 112, 194, 11, 46, 252, 56, 230, 214, 212, 2, 157, 12, 175, 20, 70, 179, 170, 36, 187, 232, 124, 115, 102, 195, 97, 253, 119, 177, 170, 145, 176, 241, 222, 73, 202, 153, 36, 58, 173, 175, 112, 31, 236, 10, 63, 170, 229, 41, 90, 131, 119, 56, 76 },
                            PhoneNumber = "6789012345",
                            RoleId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 9, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "edward.davis@example.com",
                            IsConfirmed = true,
                            Name = "edward davis",
                            PasswordHash = new byte[] { 151, 89, 208, 114, 180, 12, 169, 143, 210, 45, 110, 42, 163, 52, 113, 63, 93, 132, 66, 207, 225, 54, 32, 144, 117, 254, 78, 218, 46, 207, 194, 39, 96, 120, 69, 147, 48, 8, 116, 240, 58, 145, 121, 212, 200, 101, 189, 58, 78, 144, 195, 154, 41, 188, 180, 56, 241, 151, 104, 72, 24, 45, 138, 68 },
                            PasswordSalt = new byte[] { 126, 237, 29, 201, 237, 8, 181, 122, 104, 100, 247, 67, 231, 184, 217, 91, 103, 77, 26, 1, 2, 232, 157, 169, 69, 141, 238, 154, 28, 228, 147, 200, 201, 69, 58, 3, 32, 44, 47, 34, 10, 142, 18, 182, 76, 173, 133, 204, 52, 116, 198, 8, 100, 58, 46, 164, 11, 54, 25, 201, 52, 83, 238, 2, 23, 231, 31, 116, 242, 62, 65, 180, 211, 115, 87, 185, 225, 36, 163, 30, 182, 77, 249, 247, 117, 3, 83, 152, 136, 241, 52, 193, 154, 179, 156, 82, 133, 130, 141, 122, 67, 184, 14, 93, 194, 40, 177, 14, 185, 208, 124, 115, 48, 104, 46, 41, 62, 74, 171, 59, 165, 210, 227, 52, 75, 56, 143, 122 },
                            PhoneNumber = "7890123456",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 6, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "fiona.evans@example.com",
                            IsConfirmed = true,
                            Name = "fiona evans",
                            PasswordHash = new byte[] { 200, 81, 162, 116, 103, 225, 237, 29, 21, 62, 97, 136, 27, 177, 66, 183, 35, 240, 214, 147, 28, 230, 135, 128, 86, 33, 161, 52, 170, 178, 59, 191, 202, 120, 229, 32, 110, 115, 8, 51, 173, 143, 12, 16, 224, 232, 235, 26, 18, 189, 234, 27, 72, 37, 249, 8, 157, 205, 90, 101, 65, 70, 48, 22 },
                            PasswordSalt = new byte[] { 227, 19, 72, 196, 152, 155, 139, 241, 186, 156, 97, 211, 63, 166, 30, 79, 48, 42, 244, 99, 105, 158, 191, 7, 143, 108, 225, 37, 94, 255, 11, 81, 163, 242, 131, 179, 142, 225, 64, 109, 203, 1, 55, 104, 134, 174, 78, 74, 225, 4, 88, 57, 26, 116, 39, 206, 31, 95, 161, 119, 190, 47, 19, 201, 154, 185, 102, 203, 143, 221, 64, 159, 63, 148, 184, 180, 211, 25, 24, 118, 49, 73, 220, 51, 36, 247, 214, 3, 32, 34, 85, 147, 122, 196, 235, 133, 255, 160, 16, 215, 147, 67, 223, 101, 59, 233, 136, 62, 6, 127, 126, 60, 162, 101, 141, 219, 152, 61, 8, 248, 168, 227, 91, 83, 115, 101, 129, 156 },
                            PhoneNumber = "8901234567",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 5, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "george.fisher@example.com",
                            IsConfirmed = true,
                            Name = "george fisher",
                            PasswordHash = new byte[] { 51, 74, 60, 169, 248, 243, 183, 178, 40, 161, 206, 175, 86, 194, 207, 123, 23, 43, 70, 96, 112, 216, 153, 82, 12, 200, 144, 141, 13, 29, 254, 243, 175, 153, 28, 246, 218, 94, 21, 81, 97, 89, 80, 158, 209, 245, 30, 151, 249, 19, 43, 91, 149, 143, 203, 225, 132, 17, 12, 74, 220, 221, 127, 167 },
                            PasswordSalt = new byte[] { 194, 25, 214, 220, 60, 175, 123, 190, 161, 48, 123, 210, 158, 82, 37, 112, 92, 140, 234, 204, 40, 169, 208, 58, 236, 9, 96, 247, 145, 198, 101, 222, 219, 92, 14, 215, 53, 103, 252, 190, 237, 15, 116, 72, 28, 53, 118, 83, 30, 218, 124, 244, 154, 227, 80, 180, 33, 15, 13, 22, 26, 252, 133, 72, 116, 219, 27, 154, 26, 83, 213, 184, 123, 85, 156, 207, 60, 236, 231, 28, 10, 159, 134, 217, 237, 85, 236, 11, 242, 62, 243, 23, 33, 53, 225, 36, 42, 102, 75, 220, 142, 159, 78, 59, 64, 120, 57, 153, 162, 31, 160, 215, 203, 187, 78, 110, 7, 234, 215, 8, 146, 222, 85, 217, 245, 55, 167, 115 },
                            PhoneNumber = "9012345678",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "hannah.green@example.com",
                            IsConfirmed = true,
                            Name = "hannah green",
                            PasswordHash = new byte[] { 29, 111, 210, 207, 64, 209, 1, 187, 90, 87, 12, 230, 189, 142, 198, 121, 33, 151, 228, 119, 120, 7, 51, 1, 219, 190, 230, 23, 250, 239, 33, 101, 8, 185, 236, 166, 1, 253, 228, 211, 79, 210, 163, 77, 179, 28, 227, 254, 235, 232, 125, 124, 206, 39, 96, 218, 188, 42, 53, 231, 176, 223, 7, 146 },
                            PasswordSalt = new byte[] { 131, 194, 211, 18, 96, 28, 20, 92, 23, 218, 118, 8, 91, 108, 112, 201, 196, 86, 214, 27, 47, 165, 233, 162, 107, 61, 160, 105, 33, 169, 174, 192, 132, 197, 118, 50, 50, 149, 246, 193, 59, 168, 46, 30, 14, 12, 112, 68, 213, 195, 178, 90, 161, 174, 144, 239, 141, 64, 9, 5, 195, 157, 116, 20, 231, 31, 156, 22, 96, 253, 139, 205, 39, 186, 139, 51, 101, 169, 152, 81, 153, 41, 202, 195, 112, 38, 239, 35, 162, 118, 93, 241, 9, 71, 227, 141, 238, 171, 126, 194, 252, 113, 19, 148, 173, 139, 9, 236, 112, 247, 10, 62, 11, 203, 31, 211, 109, 136, 53, 105, 113, 31, 251, 81, 9, 140, 222, 253 },
                            PhoneNumber = "0123456789",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 8, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "isaac.lewis@example.com",
                            IsConfirmed = true,
                            Name = "isaac lewis",
                            PasswordHash = new byte[] { 189, 140, 220, 97, 241, 172, 184, 73, 142, 207, 141, 49, 248, 57, 241, 124, 88, 247, 243, 164, 120, 202, 159, 102, 132, 209, 107, 246, 15, 227, 11, 124, 247, 17, 218, 4, 25, 1, 25, 93, 242, 6, 146, 244, 50, 168, 86, 37, 160, 86, 116, 96, 229, 158, 145, 239, 251, 142, 200, 16, 79, 188, 151, 29 },
                            PasswordSalt = new byte[] { 57, 124, 170, 93, 130, 224, 158, 33, 72, 185, 94, 92, 24, 129, 205, 187, 142, 216, 235, 167, 127, 32, 61, 221, 250, 248, 128, 253, 230, 89, 234, 205, 79, 81, 181, 249, 47, 236, 218, 200, 58, 76, 81, 76, 14, 97, 211, 2, 8, 172, 208, 238, 97, 28, 24, 178, 71, 61, 68, 175, 59, 99, 174, 35, 39, 113, 98, 198, 192, 240, 151, 120, 133, 119, 115, 172, 111, 168, 97, 124, 133, 39, 84, 93, 52, 136, 146, 99, 18, 175, 237, 65, 234, 178, 164, 124, 72, 207, 175, 16, 97, 158, 85, 128, 140, 99, 249, 170, 130, 169, 90, 167, 138, 9, 142, 172, 181, 159, 204, 110, 166, 198, 208, 92, 116, 151, 237, 254 },
                            PhoneNumber = "1234567891",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 6, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "julia.martinez@example.com",
                            IsConfirmed = true,
                            Name = "julia martinez",
                            PasswordHash = new byte[] { 158, 123, 125, 16, 52, 46, 142, 195, 73, 255, 118, 175, 228, 202, 114, 245, 63, 242, 27, 186, 224, 116, 153, 12, 171, 22, 34, 78, 244, 250, 101, 15, 23, 129, 122, 84, 255, 105, 81, 85, 219, 142, 24, 130, 249, 219, 73, 118, 185, 132, 62, 187, 209, 197, 41, 205, 40, 138, 32, 84, 69, 69, 59, 36 },
                            PasswordSalt = new byte[] { 3, 189, 81, 6, 175, 231, 66, 44, 172, 184, 91, 135, 222, 1, 46, 149, 172, 6, 11, 145, 170, 17, 237, 167, 177, 191, 213, 232, 3, 53, 118, 110, 43, 222, 204, 2, 11, 192, 25, 72, 140, 1, 249, 128, 186, 75, 16, 171, 12, 5, 49, 93, 54, 125, 20, 150, 155, 16, 233, 76, 145, 152, 36, 138, 204, 48, 15, 246, 62, 68, 22, 118, 183, 180, 137, 153, 247, 31, 209, 244, 213, 218, 62, 128, 194, 181, 24, 31, 197, 75, 18, 107, 65, 234, 4, 78, 44, 55, 149, 96, 249, 75, 192, 138, 204, 131, 121, 72, 236, 88, 38, 175, 232, 188, 68, 12, 184, 33, 41, 6, 121, 232, 119, 149, 248, 98, 23, 176 },
                            PhoneNumber = "2345678902",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 7, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "kyle.wilson@example.com",
                            IsConfirmed = true,
                            Name = "kyle wilson",
                            PasswordHash = new byte[] { 89, 60, 110, 199, 40, 239, 133, 211, 66, 204, 105, 133, 126, 29, 132, 110, 245, 104, 185, 199, 155, 230, 238, 64, 49, 108, 86, 22, 149, 211, 209, 245, 16, 245, 184, 56, 84, 238, 248, 225, 215, 103, 28, 56, 239, 215, 64, 140, 90, 18, 96, 73, 109, 125, 180, 93, 17, 107, 66, 137, 66, 182, 69, 48 },
                            PasswordSalt = new byte[] { 110, 240, 122, 244, 39, 1, 74, 200, 239, 130, 178, 251, 228, 52, 104, 122, 185, 78, 49, 63, 79, 139, 194, 175, 165, 81, 84, 210, 196, 137, 141, 220, 248, 195, 96, 46, 110, 200, 24, 87, 174, 207, 50, 243, 8, 33, 144, 145, 122, 101, 169, 99, 242, 226, 138, 83, 195, 120, 118, 163, 241, 102, 3, 145, 97, 213, 165, 101, 3, 88, 250, 96, 175, 172, 227, 75, 148, 13, 228, 205, 108, 92, 1, 7, 189, 105, 190, 123, 52, 114, 16, 189, 91, 55, 219, 18, 199, 130, 96, 167, 216, 167, 242, 57, 51, 205, 60, 41, 180, 249, 78, 205, 221, 44, 237, 144, 13, 0, 200, 102, 72, 164, 145, 189, 162, 93, 157, 191 },
                            PhoneNumber = "3456789013",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 9, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "laura.johnson@example.com",
                            IsConfirmed = true,
                            Name = "laura johnson",
                            PasswordHash = new byte[] { 219, 6, 187, 241, 194, 255, 241, 195, 248, 39, 175, 20, 146, 34, 174, 230, 126, 21, 89, 201, 215, 109, 17, 35, 61, 117, 70, 10, 132, 109, 45, 163, 91, 4, 162, 11, 51, 236, 51, 118, 66, 207, 198, 159, 159, 183, 123, 19, 219, 90, 227, 82, 116, 143, 242, 9, 241, 175, 24, 102, 182, 33, 189, 75 },
                            PasswordSalt = new byte[] { 141, 127, 167, 97, 58, 34, 148, 97, 178, 172, 249, 69, 157, 153, 218, 37, 109, 61, 185, 250, 252, 67, 166, 125, 94, 253, 38, 5, 21, 237, 120, 51, 212, 57, 84, 180, 125, 62, 236, 124, 158, 151, 20, 96, 75, 89, 58, 26, 146, 123, 86, 168, 196, 160, 184, 112, 16, 96, 26, 5, 73, 124, 85, 100, 225, 133, 37, 51, 88, 114, 121, 35, 206, 174, 160, 49, 180, 251, 163, 249, 59, 178, 134, 108, 143, 22, 165, 23, 114, 126, 144, 93, 151, 115, 163, 169, 89, 157, 99, 123, 196, 77, 137, 168, 174, 63, 69, 63, 157, 158, 172, 125, 111, 69, 242, 249, 59, 81, 13, 128, 155, 203, 156, 68, 89, 243, 153, 232 },
                            PhoneNumber = "4567890124",
                            RoleId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 7, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "michael.brown@example.com",
                            IsConfirmed = true,
                            Name = "michael brown",
                            PasswordHash = new byte[] { 145, 22, 248, 153, 4, 139, 81, 40, 74, 162, 171, 193, 19, 65, 146, 248, 221, 5, 3, 232, 229, 173, 156, 204, 28, 73, 127, 63, 129, 14, 217, 136, 46, 228, 53, 174, 215, 78, 165, 101, 3, 80, 250, 236, 168, 38, 105, 16, 100, 137, 59, 248, 184, 1, 11, 50, 199, 174, 242, 215, 214, 15, 183, 61 },
                            PasswordSalt = new byte[] { 95, 46, 23, 19, 59, 220, 238, 16, 55, 134, 150, 31, 95, 129, 184, 122, 138, 196, 162, 77, 46, 134, 255, 150, 144, 186, 252, 158, 210, 153, 238, 93, 208, 239, 29, 42, 250, 222, 136, 195, 245, 249, 75, 254, 254, 241, 147, 106, 88, 250, 164, 166, 131, 237, 57, 118, 229, 176, 209, 224, 251, 248, 134, 176, 43, 32, 86, 99, 160, 84, 181, 119, 79, 190, 39, 21, 164, 141, 9, 190, 195, 166, 82, 153, 232, 31, 245, 25, 209, 34, 30, 175, 202, 27, 94, 195, 24, 147, 118, 37, 34, 36, 11, 61, 196, 107, 172, 113, 58, 189, 77, 168, 62, 92, 223, 34, 168, 47, 62, 225, 13, 56, 4, 96, 3, 227, 193, 14 },
                            PhoneNumber = "5678901235",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "natalie.moore@example.com",
                            IsConfirmed = true,
                            Name = "natalie moore",
                            PasswordHash = new byte[] { 84, 12, 0, 246, 60, 165, 3, 157, 104, 9, 226, 72, 170, 175, 105, 139, 111, 3, 238, 177, 19, 177, 95, 153, 66, 162, 73, 252, 182, 153, 235, 54, 124, 148, 194, 152, 57, 116, 176, 97, 134, 211, 166, 128, 66, 195, 159, 214, 236, 128, 101, 112, 213, 146, 201, 238, 200, 241, 220, 245, 175, 199, 195, 104 },
                            PasswordSalt = new byte[] { 154, 123, 223, 135, 91, 231, 95, 160, 94, 244, 61, 254, 208, 107, 175, 195, 157, 220, 107, 247, 56, 135, 235, 151, 68, 42, 189, 127, 60, 23, 238, 177, 229, 175, 124, 183, 44, 222, 247, 98, 179, 194, 248, 70, 69, 221, 84, 195, 130, 98, 198, 99, 103, 172, 222, 156, 104, 71, 134, 8, 75, 150, 134, 77, 255, 69, 57, 179, 88, 204, 112, 127, 47, 1, 139, 145, 147, 22, 21, 18, 114, 70, 241, 91, 75, 100, 188, 248, 241, 175, 136, 112, 44, 28, 231, 184, 25, 97, 210, 65, 103, 248, 93, 94, 105, 4, 197, 171, 26, 50, 95, 80, 207, 152, 28, 107, 178, 212, 125, 15, 7, 136, 127, 57, 127, 229, 234, 176 },
                            PhoneNumber = "6789012346",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 8, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "oliver.taylor@example.com",
                            IsConfirmed = true,
                            Name = "oliver taylor",
                            PasswordHash = new byte[] { 88, 86, 85, 92, 114, 41, 213, 219, 18, 74, 88, 29, 37, 117, 85, 168, 223, 134, 134, 17, 120, 213, 37, 116, 237, 85, 210, 47, 85, 147, 61, 97, 211, 215, 172, 202, 150, 218, 109, 192, 78, 90, 151, 179, 246, 148, 178, 92, 16, 57, 119, 174, 193, 118, 175, 221, 160, 8, 127, 5, 106, 124, 164, 16 },
                            PasswordSalt = new byte[] { 30, 32, 158, 41, 207, 216, 165, 183, 72, 44, 171, 133, 73, 246, 179, 4, 213, 117, 4, 170, 200, 109, 98, 139, 29, 99, 164, 9, 226, 159, 52, 75, 59, 91, 10, 89, 211, 125, 210, 60, 0, 85, 167, 226, 55, 243, 186, 32, 10, 250, 226, 184, 220, 191, 249, 38, 158, 96, 120, 80, 88, 165, 124, 135, 177, 219, 30, 217, 183, 238, 128, 159, 89, 119, 105, 196, 52, 8, 129, 244, 162, 169, 131, 152, 225, 99, 179, 164, 103, 157, 28, 127, 169, 193, 195, 59, 145, 158, 75, 69, 6, 189, 160, 163, 21, 121, 202, 159, 251, 126, 52, 82, 136, 224, 104, 206, 8, 185, 6, 175, 242, 169, 185, 216, 234, 59, 71, 109 },
                            PhoneNumber = "7890123457",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 8, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "penelope.anderson@example.com",
                            IsConfirmed = true,
                            Name = "penelope anderson",
                            PasswordHash = new byte[] { 173, 141, 42, 6, 76, 247, 165, 45, 77, 115, 120, 130, 203, 138, 158, 49, 187, 207, 109, 191, 81, 117, 227, 94, 250, 34, 56, 71, 120, 171, 41, 176, 67, 66, 49, 239, 197, 92, 159, 208, 240, 120, 221, 27, 68, 58, 151, 110, 140, 96, 78, 199, 148, 103, 210, 227, 142, 116, 139, 40, 0, 253, 247, 144 },
                            PasswordSalt = new byte[] { 176, 103, 38, 176, 97, 192, 34, 111, 85, 190, 39, 183, 55, 229, 196, 226, 110, 178, 83, 192, 151, 5, 249, 35, 135, 38, 129, 145, 164, 235, 97, 218, 16, 31, 196, 111, 62, 76, 239, 237, 107, 206, 55, 119, 66, 254, 143, 26, 34, 89, 143, 170, 60, 155, 157, 113, 216, 11, 148, 8, 132, 79, 54, 138, 86, 122, 255, 196, 204, 255, 38, 143, 56, 0, 253, 22, 249, 224, 110, 192, 47, 201, 42, 231, 243, 82, 112, 114, 38, 83, 121, 121, 41, 244, 0, 204, 181, 45, 107, 210, 99, 124, 182, 141, 162, 111, 28, 251, 19, 47, 200, 57, 89, 15, 250, 240, 48, 119, 92, 76, 146, 178, 216, 62, 240, 141, 65, 252 },
                            PhoneNumber = "8901234568",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 8, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "quinn.harris@example.com",
                            IsConfirmed = true,
                            Name = "quinn harris",
                            PasswordHash = new byte[] { 230, 93, 26, 148, 125, 218, 212, 101, 139, 232, 157, 140, 252, 175, 103, 132, 239, 160, 224, 194, 82, 229, 185, 117, 94, 168, 224, 236, 81, 112, 204, 107, 7, 213, 185, 51, 112, 141, 82, 102, 16, 135, 128, 233, 211, 108, 173, 111, 150, 135, 249, 28, 1, 35, 220, 51, 143, 247, 40, 214, 39, 197, 152, 234 },
                            PasswordSalt = new byte[] { 6, 70, 117, 191, 92, 228, 125, 102, 114, 32, 56, 188, 252, 99, 95, 84, 234, 209, 199, 42, 169, 103, 237, 178, 217, 210, 60, 76, 209, 217, 232, 220, 28, 210, 89, 215, 105, 127, 200, 154, 112, 11, 212, 50, 37, 45, 173, 144, 71, 254, 219, 41, 163, 115, 194, 120, 147, 12, 123, 218, 98, 236, 24, 42, 164, 1, 190, 238, 192, 149, 135, 119, 4, 89, 185, 3, 20, 112, 15, 110, 82, 6, 137, 167, 82, 137, 72, 33, 187, 54, 66, 77, 79, 89, 17, 143, 75, 192, 220, 36, 207, 168, 244, 71, 227, 147, 248, 197, 33, 33, 105, 73, 4, 52, 43, 19, 36, 240, 126, 208, 29, 42, 57, 148, 190, 133, 63, 131 },
                            PhoneNumber = "9012345679",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 9, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "rachel.scott@example.com",
                            IsConfirmed = true,
                            Name = "rachel scott",
                            PasswordHash = new byte[] { 194, 201, 248, 118, 240, 31, 234, 32, 210, 129, 130, 159, 111, 127, 115, 98, 199, 196, 110, 210, 148, 184, 184, 157, 67, 207, 41, 218, 126, 53, 254, 158, 213, 164, 72, 84, 118, 128, 32, 181, 200, 131, 107, 36, 72, 125, 37, 105, 181, 253, 244, 169, 146, 3, 146, 80, 234, 12, 150, 48, 100, 247, 182, 232 },
                            PasswordSalt = new byte[] { 47, 198, 2, 149, 27, 249, 221, 99, 212, 135, 34, 232, 217, 232, 161, 170, 93, 223, 183, 91, 224, 4, 96, 141, 220, 150, 218, 122, 111, 132, 117, 121, 152, 158, 169, 59, 209, 131, 51, 145, 237, 140, 254, 252, 78, 230, 100, 171, 241, 57, 226, 42, 165, 12, 161, 255, 52, 56, 123, 205, 79, 82, 105, 120, 168, 233, 228, 33, 151, 145, 213, 204, 164, 36, 235, 253, 230, 66, 44, 86, 137, 187, 1, 160, 220, 151, 139, 188, 219, 104, 189, 129, 207, 132, 206, 76, 8, 251, 52, 150, 249, 60, 131, 241, 143, 236, 87, 32, 111, 213, 200, 231, 92, 49, 216, 164, 216, 9, 31, 195, 24, 12, 164, 222, 99, 81, 141, 6 },
                            PhoneNumber = "0123456790",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "hannah.green@example.com",
                            IsConfirmed = true,
                            Name = "hannah green",
                            PasswordHash = new byte[] { 231, 224, 214, 227, 25, 122, 11, 54, 88, 177, 35, 120, 116, 166, 66, 194, 236, 231, 169, 174, 198, 157, 163, 133, 225, 34, 40, 247, 154, 200, 226, 215, 230, 235, 207, 249, 49, 194, 74, 51, 90, 55, 49, 190, 2, 19, 19, 13, 77, 152, 31, 242, 171, 122, 86, 222, 68, 253, 48, 196, 105, 194, 68, 253 },
                            PasswordSalt = new byte[] { 179, 84, 79, 98, 223, 149, 44, 68, 144, 192, 64, 252, 56, 104, 244, 247, 193, 87, 64, 81, 215, 220, 107, 134, 157, 159, 179, 46, 41, 139, 160, 61, 240, 98, 96, 93, 114, 33, 214, 207, 84, 230, 166, 183, 8, 230, 7, 183, 173, 118, 67, 134, 62, 64, 88, 227, 32, 255, 93, 215, 21, 187, 58, 148, 53, 154, 176, 83, 13, 167, 204, 210, 39, 34, 33, 99, 122, 245, 127, 232, 58, 132, 42, 120, 118, 95, 97, 76, 117, 191, 251, 189, 205, 205, 252, 86, 40, 0, 167, 72, 192, 250, 23, 130, 129, 189, 126, 168, 60, 35, 222, 206, 82, 17, 150, 227, 178, 112, 132, 157, 153, 25, 112, 168, 157, 2, 11, 34 },
                            PhoneNumber = "0123456789",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2024, 5, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "isaac.lewis@example.com",
                            IsConfirmed = true,
                            Name = "isaac lewis",
                            PasswordHash = new byte[] { 186, 127, 224, 12, 226, 67, 31, 213, 206, 122, 105, 200, 206, 188, 87, 145, 152, 84, 166, 224, 215, 255, 6, 99, 29, 47, 228, 66, 68, 3, 28, 97, 48, 31, 230, 186, 224, 154, 98, 128, 78, 255, 245, 251, 216, 206, 164, 194, 169, 124, 32, 98, 201, 23, 31, 61, 161, 117, 204, 185, 232, 211, 175, 174 },
                            PasswordSalt = new byte[] { 171, 6, 52, 140, 49, 126, 224, 86, 3, 7, 204, 83, 200, 6, 106, 81, 146, 238, 85, 55, 104, 80, 128, 134, 193, 232, 222, 78, 184, 127, 134, 171, 131, 149, 235, 155, 89, 113, 37, 51, 222, 204, 182, 197, 185, 89, 125, 130, 111, 48, 82, 127, 244, 234, 111, 35, 235, 98, 244, 131, 4, 190, 36, 65, 134, 197, 197, 234, 174, 87, 72, 222, 218, 84, 87, 80, 3, 176, 216, 194, 80, 134, 81, 134, 100, 214, 38, 196, 2, 25, 37, 224, 252, 234, 104, 137, 47, 164, 57, 123, 100, 224, 81, 196, 41, 86, 226, 162, 10, 164, 161, 140, 245, 128, 167, 195, 22, 170, 201, 104, 68, 45, 98, 67, 40, 141, 142, 71 },
                            PhoneNumber = "1234567891",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2024, 9, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "julia.martinez@example.com",
                            IsConfirmed = true,
                            Name = "julia martinez",
                            PasswordHash = new byte[] { 97, 149, 163, 76, 238, 161, 193, 238, 81, 23, 162, 42, 198, 5, 109, 56, 144, 128, 10, 106, 164, 153, 242, 133, 14, 34, 4, 151, 210, 217, 246, 34, 79, 115, 128, 237, 3, 135, 92, 201, 234, 52, 66, 28, 169, 161, 134, 193, 136, 105, 165, 68, 163, 47, 48, 95, 126, 183, 145, 88, 245, 60, 155, 145 },
                            PasswordSalt = new byte[] { 139, 94, 215, 209, 194, 228, 231, 3, 103, 147, 160, 171, 38, 248, 116, 122, 121, 96, 117, 88, 91, 8, 159, 85, 31, 193, 232, 231, 3, 120, 107, 116, 106, 0, 93, 167, 24, 239, 76, 67, 60, 81, 231, 43, 61, 109, 157, 144, 232, 11, 63, 199, 123, 3, 33, 90, 37, 60, 152, 57, 15, 136, 107, 120, 225, 86, 225, 205, 167, 84, 225, 103, 21, 123, 123, 31, 125, 216, 184, 141, 10, 57, 12, 109, 111, 200, 62, 93, 55, 254, 23, 239, 216, 136, 209, 144, 224, 33, 85, 214, 5, 174, 217, 183, 202, 255, 193, 173, 94, 224, 62, 63, 163, 154, 250, 0, 99, 90, 221, 194, 251, 143, 43, 225, 51, 186, 223, 23 },
                            PhoneNumber = "2345678902",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2024, 9, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "kyle.wilson@example.com",
                            IsConfirmed = true,
                            Name = "kyle wilson",
                            PasswordHash = new byte[] { 232, 182, 208, 202, 120, 67, 89, 76, 134, 53, 212, 159, 215, 52, 148, 185, 196, 161, 209, 136, 52, 91, 146, 241, 15, 31, 143, 202, 59, 40, 202, 97, 64, 113, 127, 137, 151, 217, 236, 202, 206, 2, 1, 130, 152, 95, 77, 187, 115, 223, 206, 149, 129, 18, 93, 246, 89, 175, 71, 95, 125, 119, 132, 197 },
                            PasswordSalt = new byte[] { 2, 69, 217, 96, 73, 73, 199, 254, 235, 83, 200, 62, 212, 27, 107, 118, 230, 46, 121, 59, 152, 145, 99, 111, 126, 99, 89, 135, 197, 246, 129, 224, 59, 63, 228, 157, 9, 219, 159, 75, 239, 112, 210, 134, 51, 130, 112, 43, 65, 72, 184, 253, 137, 232, 220, 164, 48, 125, 240, 207, 191, 137, 160, 18, 213, 128, 245, 247, 222, 217, 198, 44, 132, 196, 22, 163, 146, 163, 161, 63, 89, 54, 24, 143, 190, 112, 39, 67, 229, 149, 135, 235, 54, 85, 28, 168, 115, 214, 2, 232, 2, 31, 101, 97, 194, 251, 31, 216, 229, 86, 13, 147, 199, 48, 203, 183, 65, 138, 92, 247, 191, 69, 67, 133, 103, 40, 132, 189 },
                            PhoneNumber = "3456789013",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2024, 9, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "laura.johnson@example.com",
                            IsConfirmed = true,
                            Name = "laura johnson",
                            PasswordHash = new byte[] { 213, 133, 244, 87, 7, 20, 5, 45, 109, 160, 123, 203, 141, 252, 89, 59, 194, 56, 208, 151, 51, 239, 141, 147, 46, 9, 153, 5, 142, 141, 244, 123, 36, 175, 162, 241, 57, 155, 34, 193, 59, 230, 131, 187, 251, 232, 166, 248, 75, 224, 238, 95, 214, 80, 46, 242, 102, 78, 231, 237, 205, 31, 175, 57 },
                            PasswordSalt = new byte[] { 217, 77, 243, 38, 51, 167, 89, 241, 82, 219, 181, 147, 30, 21, 125, 228, 159, 189, 15, 18, 29, 26, 176, 4, 141, 110, 13, 130, 160, 114, 115, 75, 83, 200, 74, 26, 159, 237, 127, 58, 135, 102, 222, 111, 88, 252, 91, 98, 42, 185, 205, 202, 108, 255, 136, 223, 196, 24, 67, 78, 204, 224, 5, 95, 24, 225, 222, 133, 117, 12, 203, 232, 190, 23, 152, 11, 60, 80, 182, 124, 160, 23, 162, 27, 129, 248, 212, 141, 243, 119, 129, 123, 223, 139, 21, 126, 57, 243, 68, 195, 239, 30, 224, 196, 59, 62, 102, 77, 198, 142, 251, 94, 99, 208, 53, 241, 237, 195, 48, 84, 125, 51, 65, 60, 108, 102, 34, 248 },
                            PhoneNumber = "4567890124",
                            RoleId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(2024, 9, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "michael.brown@example.com",
                            IsConfirmed = true,
                            Name = "michael brown",
                            PasswordHash = new byte[] { 142, 48, 90, 13, 34, 133, 219, 177, 0, 116, 88, 58, 29, 10, 231, 127, 24, 132, 173, 51, 78, 29, 59, 99, 49, 149, 25, 43, 44, 33, 89, 49, 79, 97, 55, 165, 242, 223, 186, 142, 218, 161, 117, 11, 213, 87, 216, 41, 99, 99, 143, 182, 179, 158, 212, 103, 231, 9, 208, 79, 154, 220, 162, 189 },
                            PasswordSalt = new byte[] { 115, 234, 4, 51, 157, 245, 161, 56, 148, 78, 219, 246, 29, 89, 196, 200, 242, 210, 149, 0, 57, 161, 194, 31, 251, 190, 209, 207, 174, 6, 136, 167, 207, 127, 255, 202, 235, 55, 233, 76, 39, 187, 124, 84, 147, 173, 93, 163, 152, 203, 171, 214, 235, 212, 155, 194, 48, 91, 42, 2, 61, 171, 210, 204, 4, 209, 223, 121, 43, 224, 221, 193, 137, 30, 103, 59, 87, 169, 250, 52, 31, 7, 164, 214, 59, 128, 154, 156, 238, 228, 217, 175, 180, 13, 150, 231, 72, 157, 253, 172, 83, 168, 150, 73, 249, 131, 55, 252, 222, 226, 29, 246, 70, 92, 165, 103, 178, 203, 32, 57, 10, 70, 113, 247, 8, 181, 171, 199 },
                            PhoneNumber = "5678901235",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(2024, 5, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "natalie.moore@example.com",
                            IsConfirmed = true,
                            Name = "natalie moore",
                            PasswordHash = new byte[] { 205, 172, 218, 163, 222, 194, 44, 68, 129, 67, 190, 161, 134, 174, 75, 105, 125, 90, 193, 94, 228, 118, 73, 24, 48, 57, 145, 34, 130, 120, 222, 31, 252, 33, 68, 255, 102, 53, 243, 123, 152, 18, 38, 234, 107, 85, 226, 237, 173, 218, 53, 253, 161, 135, 103, 252, 25, 54, 73, 128, 176, 116, 173, 103 },
                            PasswordSalt = new byte[] { 21, 219, 138, 16, 84, 125, 103, 142, 175, 123, 129, 150, 161, 237, 181, 186, 85, 10, 10, 159, 133, 57, 147, 30, 82, 58, 172, 224, 4, 42, 96, 227, 3, 76, 209, 226, 184, 40, 68, 220, 220, 105, 165, 30, 90, 77, 6, 64, 2, 61, 180, 248, 37, 206, 209, 4, 232, 56, 120, 52, 246, 88, 182, 40, 14, 228, 30, 25, 244, 148, 76, 75, 134, 208, 104, 10, 205, 91, 67, 4, 36, 110, 47, 211, 30, 45, 46, 6, 23, 76, 121, 202, 173, 179, 191, 197, 147, 5, 12, 1, 135, 104, 0, 153, 21, 168, 10, 20, 65, 75, 184, 79, 240, 173, 14, 22, 216, 32, 127, 135, 203, 159, 165, 72, 4, 105, 176, 82 },
                            PhoneNumber = "6789012346",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(2024, 8, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "oliver.taylor@example.com",
                            IsConfirmed = true,
                            Name = "oliver taylor",
                            PasswordHash = new byte[] { 146, 122, 13, 148, 85, 163, 52, 18, 12, 1, 78, 84, 150, 23, 37, 184, 244, 80, 183, 203, 109, 200, 100, 59, 76, 117, 206, 92, 3, 230, 168, 7, 103, 1, 142, 88, 254, 142, 215, 101, 226, 251, 208, 155, 120, 150, 226, 25, 87, 178, 161, 92, 56, 254, 139, 172, 77, 62, 17, 222, 43, 101, 206, 102 },
                            PasswordSalt = new byte[] { 223, 159, 29, 140, 63, 244, 253, 197, 209, 144, 209, 78, 70, 213, 200, 144, 95, 95, 244, 240, 157, 124, 207, 124, 31, 188, 204, 81, 195, 125, 57, 17, 77, 83, 95, 255, 18, 244, 193, 139, 50, 165, 157, 70, 63, 45, 83, 145, 15, 129, 67, 90, 161, 145, 104, 43, 101, 132, 185, 131, 143, 50, 239, 229, 23, 174, 254, 119, 102, 21, 124, 123, 77, 178, 152, 120, 26, 192, 45, 208, 206, 56, 44, 187, 103, 201, 225, 227, 145, 110, 71, 252, 95, 176, 193, 51, 120, 227, 218, 133, 219, 97, 92, 140, 236, 90, 203, 76, 249, 22, 26, 139, 87, 136, 207, 182, 171, 110, 81, 58, 27, 57, 166, 177, 79, 8, 249, 7 },
                            PhoneNumber = "7890123457",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(2024, 8, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "penelope.anderson@example.com",
                            IsConfirmed = true,
                            Name = "penelope anderson",
                            PasswordHash = new byte[] { 145, 194, 105, 214, 133, 128, 198, 215, 250, 148, 18, 108, 56, 100, 193, 68, 50, 140, 52, 0, 197, 163, 223, 113, 208, 85, 197, 227, 182, 178, 17, 17, 129, 126, 34, 166, 126, 14, 234, 229, 199, 37, 140, 85, 230, 173, 49, 190, 46, 254, 144, 155, 198, 253, 124, 151, 135, 98, 25, 223, 31, 236, 120, 50 },
                            PasswordSalt = new byte[] { 133, 33, 61, 83, 251, 57, 151, 130, 241, 194, 204, 219, 216, 2, 2, 150, 73, 191, 212, 215, 57, 202, 39, 109, 156, 0, 210, 57, 185, 8, 220, 136, 10, 66, 59, 9, 137, 151, 179, 220, 179, 71, 142, 5, 38, 40, 242, 142, 109, 88, 72, 59, 234, 136, 137, 19, 236, 202, 90, 198, 157, 106, 248, 110, 29, 46, 198, 11, 32, 218, 19, 180, 115, 253, 126, 6, 142, 240, 242, 45, 30, 160, 229, 132, 26, 161, 141, 102, 206, 186, 176, 198, 81, 36, 216, 214, 56, 235, 32, 99, 199, 114, 183, 198, 123, 235, 195, 160, 193, 56, 137, 179, 110, 86, 69, 135, 216, 149, 144, 239, 148, 140, 81, 42, 158, 152, 25, 81 },
                            PhoneNumber = "8901234568",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(2024, 8, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "quinn.harris@example.com",
                            IsConfirmed = true,
                            Name = "quinn harris",
                            PasswordHash = new byte[] { 66, 162, 239, 228, 220, 240, 250, 153, 72, 17, 32, 17, 68, 217, 14, 246, 185, 63, 51, 213, 56, 11, 79, 253, 144, 120, 201, 124, 140, 235, 213, 127, 183, 253, 22, 98, 7, 18, 193, 101, 193, 186, 84, 84, 15, 209, 179, 9, 36, 177, 142, 114, 124, 69, 192, 123, 127, 235, 230, 93, 154, 168, 190, 133 },
                            PasswordSalt = new byte[] { 92, 123, 64, 8, 140, 41, 212, 148, 57, 101, 133, 130, 182, 223, 246, 96, 59, 241, 83, 254, 128, 54, 92, 71, 124, 130, 239, 56, 209, 127, 251, 190, 51, 220, 198, 198, 234, 99, 70, 28, 110, 242, 243, 186, 139, 232, 157, 6, 49, 85, 229, 150, 25, 176, 109, 182, 6, 84, 34, 16, 251, 113, 176, 63, 34, 182, 67, 193, 197, 222, 143, 105, 36, 230, 135, 141, 56, 17, 188, 207, 98, 76, 98, 232, 49, 185, 162, 13, 190, 88, 56, 180, 158, 73, 195, 19, 97, 67, 183, 63, 206, 51, 55, 53, 43, 219, 190, 55, 60, 218, 123, 240, 234, 247, 239, 211, 4, 203, 69, 248, 89, 149, 214, 142, 244, 57, 234, 200 },
                            PhoneNumber = "9012345679",
                            RoleId = 2,
                            SectorId = 3
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cliente"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Clan", "Clan")
                        .WithMany("Coders")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Gender", "Gender")
                        .WithMany("Coders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderLanguage", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Language", "Language")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.LanguageLevel", "LanguageLevel")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderSoftSkill", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderSoftSkills")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.SoftSkill", "SoftSkill")
                        .WithMany("CoderSoftSkills")
                        .HasForeignKey("SoftSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("SoftSkill");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderTechnicalSkill", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.TechnicalSkill", "TechnicalSkill")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("TechnicalSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", "TechnicalSkillLevel")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("TechnicalSkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("TechnicalSkill");

                    b.Navigation("TechnicalSkillLevel");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.User", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Sector", "Sector")
                        .WithMany("Users")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Clan", b =>
                {
                    b.Navigation("Coders");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.Navigation("CoderLanguages");

                    b.Navigation("CoderSoftSkills");

                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Gender", b =>
                {
                    b.Navigation("Coders");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Language", b =>
                {
                    b.Navigation("CoderLanguages");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.LanguageLevel", b =>
                {
                    b.Navigation("CoderLanguages");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Sector", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.SoftSkill", b =>
                {
                    b.Navigation("CoderSoftSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkill", b =>
                {
                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", b =>
                {
                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
