// <auto-generated />
using System;
using Backend_Riwi_LinkUp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend_Riwi_LinkUp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240913120805_AddingSeedersV2")]
    partial class AddingSeedersV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Clan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Clans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "berners lee"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ritchie"
                        },
                        new
                        {
                            Id = 3,
                            Name = "gates"
                        },
                        new
                        {
                            Id = 4,
                            Name = "jeff bezzos"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClanId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UrlImage")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId");

                    b.HasIndex("GenderId");

                    b.ToTable("Coders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(1992, 5, 22, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "especialista en front-end",
                            GenderId = 1,
                            Name = "edgar cardona",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQH22ztGRhoM2g/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1677008729241?e=1731542400&v=beta&t=89RVHJpVnq8_m5ObsEU3CEs0KVrBraYI4gGWdIEuXEM"
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(1988, 9, 30, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrollador backend",
                            GenderId = 1,
                            Name = "nicolas martinez",
                            UrlImage = "https://avatars.githubusercontent.com/u/164014608?v=4&size=64"
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(1995, 3, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrolladora de aplicaciones móviles",
                            GenderId = 2,
                            Name = "brayan acosta",
                            UrlImage = "https://media.licdn.com/dms/image/v2/C4D03AQHAwWzaQDI6gw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1641180503207?e=1731542400&v=beta&t=A7lWrZBzJ84ZlLdFsvKA73tbZKdP1vfPGuvf3Ah6XH4"
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(1991, 7, 18, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "ingeniero devops",
                            GenderId = 1,
                            Name = "jose barreto",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQEqn-8BGpvfaw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1724345138906?e=1731542400&v=beta&t=wWL1nKrccb9DfJVg8Dz6v49L3AIpunv8gkovi5BpqgQ"
                        },
                        new
                        {
                            Id = 5,
                            Birthday = new DateTime(1993, 11, 5, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "diseñadora ui/ux",
                            GenderId = 2,
                            Name = "juan arias",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQGXb8dGisr-wQ/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1724327950529?e=1731542400&v=beta&t=uCMHF7cJT2SfM-4acPddFycPWzAUYFWYr_WofvG2Cf8"
                        },
                        new
                        {
                            Id = 6,
                            Birthday = new DateTime(1989, 2, 28, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "científico de datos",
                            GenderId = 1,
                            Name = "juan rojas",
                            UrlImage = "https://media.licdn.com/dms/image/v2/D4E03AQGyhYNRLL9edg/profile-displayphoto-shrink_200_200/profile-displayphoto-shrink_200_200/0/1681701914743?e=1731542400&v=beta&t=0aYfJifoDREE5dhY4dCSD8IECOotdQqJ5HwtLfAKkxw"
                        },
                        new
                        {
                            Id = 7,
                            Birthday = new DateTime(1994, 6, 12, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 4,
                            Description = "especialista en seguridad",
                            GenderId = 2,
                            Name = "ava martinez",
                            UrlImage = "https://example.com/ava.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Birthday = new DateTime(1987, 10, 8, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 1,
                            Description = "desarrollador de videojuegos",
                            GenderId = 1,
                            Name = "noah anderson",
                            UrlImage = "https://example.com/noah.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Birthday = new DateTime(1996, 4, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 2,
                            Description = "desarrolladora de blockchain",
                            GenderId = 2,
                            Name = "isabella white",
                            UrlImage = "https://example.com/isabella.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Birthday = new DateTime(1990, 1, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            ClanId = 3,
                            Description = "desarrollador full-stack",
                            GenderId = 1,
                            Name = "alex johnson",
                            UrlImage = "https://example.com/alex.jpg"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("CoderLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoderId = 1,
                            LanguageId = 1,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 2,
                            CoderId = 1,
                            LanguageId = 3,
                            LanguageLevelId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoderId = 2,
                            LanguageId = 1,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 4,
                            CoderId = 3,
                            LanguageId = 2,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 5,
                            CoderId = 4,
                            LanguageId = 5,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 6,
                            CoderId = 5,
                            LanguageId = 3,
                            LanguageLevelId = 5
                        },
                        new
                        {
                            Id = 7,
                            CoderId = 6,
                            LanguageId = 2,
                            LanguageLevelId = 2
                        },
                        new
                        {
                            Id = 8,
                            CoderId = 7,
                            LanguageId = 1,
                            LanguageLevelId = 3
                        },
                        new
                        {
                            Id = 9,
                            CoderId = 8,
                            LanguageId = 5,
                            LanguageLevelId = 4
                        },
                        new
                        {
                            Id = 10,
                            CoderId = 9,
                            LanguageId = 1,
                            LanguageLevelId = 6
                        },
                        new
                        {
                            Id = 11,
                            CoderId = 10,
                            LanguageId = 2,
                            LanguageLevelId = 3
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderSoftSkill", b =>
                {
                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("SoftSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("CoderId", "SoftSkillId");

                    b.HasIndex("SoftSkillId");

                    b.ToTable("CoderSoftSkills");

                    b.HasData(
                        new
                        {
                            CoderId = 1,
                            SoftSkillId = 1,
                            Id = 1
                        },
                        new
                        {
                            CoderId = 1,
                            SoftSkillId = 3,
                            Id = 2
                        },
                        new
                        {
                            CoderId = 2,
                            SoftSkillId = 2,
                            Id = 3
                        },
                        new
                        {
                            CoderId = 3,
                            SoftSkillId = 3,
                            Id = 4
                        },
                        new
                        {
                            CoderId = 4,
                            SoftSkillId = 4,
                            Id = 5
                        },
                        new
                        {
                            CoderId = 5,
                            SoftSkillId = 5,
                            Id = 6
                        },
                        new
                        {
                            CoderId = 6,
                            SoftSkillId = 6,
                            Id = 7
                        },
                        new
                        {
                            CoderId = 7,
                            SoftSkillId = 7,
                            Id = 8
                        },
                        new
                        {
                            CoderId = 8,
                            SoftSkillId = 8,
                            Id = 9
                        },
                        new
                        {
                            CoderId = 9,
                            SoftSkillId = 9,
                            Id = 10
                        },
                        new
                        {
                            CoderId = 10,
                            SoftSkillId = 10,
                            Id = 11
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderTechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CoderId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("TechnicalSkillLevelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CoderId");

                    b.HasIndex("TechnicalSkillId");

                    b.HasIndex("TechnicalSkillLevelId");

                    b.ToTable("CoderTechnicalSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoderId = 1,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 2,
                            CoderId = 1,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoderId = 2,
                            TechnicalSkillId = 2,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 4,
                            CoderId = 3,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 5,
                            CoderId = 4,
                            TechnicalSkillId = 6,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 6,
                            CoderId = 5,
                            TechnicalSkillId = 4,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 7,
                            CoderId = 6,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 8,
                            CoderId = 7,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 9,
                            CoderId = 8,
                            TechnicalSkillId = 5,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 10,
                            CoderId = 9,
                            TechnicalSkillId = 1,
                            TechnicalSkillLevelId = 1
                        },
                        new
                        {
                            Id = 11,
                            CoderId = 10,
                            TechnicalSkillId = 3,
                            TechnicalSkillLevelId = 1
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "masculino"
                        },
                        new
                        {
                            Id = 2,
                            Name = "femenino"
                        },
                        new
                        {
                            Id = 3,
                            Name = "prefiero no indicarlo"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "inglés"
                        },
                        new
                        {
                            Id = 2,
                            Name = "portugues"
                        },
                        new
                        {
                            Id = 3,
                            Name = "francés"
                        },
                        new
                        {
                            Id = 4,
                            Name = "aleman"
                        },
                        new
                        {
                            Id = 5,
                            Name = "chino"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "a1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "a2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "b1"
                        },
                        new
                        {
                            Id = 4,
                            Name = "b2"
                        },
                        new
                        {
                            Id = 5,
                            Name = "c1"
                        },
                        new
                        {
                            Id = 6,
                            Name = "c2"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Sector");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "tecnología"
                        },
                        new
                        {
                            Id = 2,
                            Name = "finanzas"
                        },
                        new
                        {
                            Id = 3,
                            Name = "salud"
                        },
                        new
                        {
                            Id = 4,
                            Name = "educación"
                        },
                        new
                        {
                            Id = 5,
                            Name = "manufactura"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.SoftSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("SoftSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "comunicación"
                        },
                        new
                        {
                            Id = 2,
                            Name = "trabajo en equipo"
                        },
                        new
                        {
                            Id = 3,
                            Name = "resolución de problemas"
                        },
                        new
                        {
                            Id = 4,
                            Name = "adaptabilidad"
                        },
                        new
                        {
                            Id = 5,
                            Name = "creatividad"
                        },
                        new
                        {
                            Id = 6,
                            Name = "gestión del tiempo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "liderazgo"
                        },
                        new
                        {
                            Id = 8,
                            Name = "inteligencia emocional"
                        },
                        new
                        {
                            Id = 9,
                            Name = "pensamiento crítico"
                        },
                        new
                        {
                            Id = 10,
                            Name = "resolución de conflictos"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "javaScript"
                        },
                        new
                        {
                            Id = 2,
                            Name = "python"
                        },
                        new
                        {
                            Id = 3,
                            Name = "java"
                        },
                        new
                        {
                            Id = 4,
                            Name = "c#"
                        },
                        new
                        {
                            Id = 5,
                            Name = "nextJs"
                        },
                        new
                        {
                            Id = 6,
                            Name = "nodeJs"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TechnicalSkillLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "junior"
                        },
                        new
                        {
                            Id = 2,
                            Name = "semi-senior"
                        },
                        new
                        {
                            Id = 3,
                            Name = "senior"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("SectorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("SectorId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 3, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "jackeline.cardona@example.com",
                            IsConfirmed = true,
                            Name = "jackeline cardona",
                            PasswordHash = new byte[] { 69, 27, 200, 77, 25, 233, 45, 139, 183, 219, 126, 54, 60, 126, 53, 195, 166, 203, 39, 212, 212, 217, 22, 233, 31, 2, 9, 138, 124, 221, 137, 142, 143, 168, 147, 5, 131, 24, 147, 181, 74, 214, 2, 192, 147, 1, 186, 87, 174, 61, 149, 77, 66, 138, 142, 63, 81, 122, 63, 151, 54, 18, 214, 30 },
                            PasswordSalt = new byte[] { 149, 232, 35, 174, 107, 82, 24, 234, 124, 203, 186, 122, 173, 88, 50, 144, 17, 34, 10, 121, 217, 43, 118, 88, 230, 113, 158, 184, 23, 210, 30, 137, 12, 53, 112, 46, 101, 5, 50, 211, 65, 236, 136, 92, 43, 154, 75, 139, 90, 107, 61, 104, 239, 223, 62, 25, 206, 23, 157, 251, 183, 40, 36, 215, 241, 200, 207, 2, 249, 75, 14, 173, 164, 233, 214, 176, 74, 195, 227, 146, 27, 218, 245, 178, 224, 53, 146, 73, 72, 156, 246, 147, 133, 26, 156, 164, 123, 65, 153, 54, 54, 86, 153, 245, 67, 37, 138, 213, 44, 113, 168, 139, 144, 47, 108, 130, 60, 137, 251, 250, 130, 65, 72, 210, 211, 91, 182, 222 },
                            PhoneNumber = "1234567890",
                            RoleId = 1,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 3, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "jane.smith@example.com",
                            IsConfirmed = true,
                            Name = "jane smith",
                            PasswordHash = new byte[] { 234, 180, 79, 49, 60, 99, 129, 116, 113, 71, 158, 227, 233, 157, 189, 102, 115, 187, 89, 114, 213, 211, 1, 105, 182, 3, 245, 20, 206, 249, 135, 167, 206, 50, 99, 22, 114, 218, 250, 84, 81, 20, 131, 165, 205, 192, 251, 219, 98, 2, 16, 7, 228, 120, 245, 89, 34, 22, 123, 231, 142, 112, 134, 254 },
                            PasswordSalt = new byte[] { 41, 251, 237, 82, 97, 187, 76, 225, 139, 111, 190, 168, 174, 96, 219, 122, 201, 82, 105, 228, 210, 182, 244, 232, 242, 241, 198, 226, 45, 213, 140, 243, 139, 174, 41, 227, 42, 86, 180, 149, 153, 37, 111, 191, 179, 217, 111, 54, 147, 112, 162, 224, 190, 255, 170, 116, 245, 64, 164, 95, 229, 156, 83, 172, 190, 211, 204, 110, 103, 148, 159, 210, 216, 37, 212, 167, 254, 32, 145, 45, 148, 194, 39, 124, 224, 205, 62, 205, 127, 154, 148, 250, 71, 51, 51, 17, 170, 147, 76, 44, 174, 81, 8, 31, 121, 201, 181, 77, 42, 165, 14, 9, 70, 250, 251, 147, 188, 98, 227, 236, 240, 55, 240, 77, 79, 8, 142, 198 },
                            PhoneNumber = "2345678901",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 4, 5, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "alice.johnson@example.com",
                            IsConfirmed = true,
                            Name = "alice johnson",
                            PasswordHash = new byte[] { 98, 94, 202, 61, 35, 26, 228, 211, 29, 153, 105, 24, 134, 131, 61, 130, 117, 76, 138, 193, 120, 175, 131, 175, 180, 129, 216, 227, 255, 214, 38, 240, 50, 181, 171, 183, 3, 197, 62, 62, 30, 138, 37, 104, 42, 103, 120, 84, 214, 131, 49, 173, 163, 132, 38, 133, 85, 192, 103, 26, 167, 175, 117, 217 },
                            PasswordSalt = new byte[] { 144, 30, 156, 254, 74, 141, 40, 13, 195, 162, 111, 31, 151, 162, 116, 40, 116, 204, 42, 174, 112, 18, 29, 86, 74, 244, 126, 159, 202, 143, 182, 94, 239, 58, 4, 27, 144, 171, 230, 202, 7, 73, 143, 178, 159, 193, 189, 101, 193, 206, 93, 44, 121, 43, 182, 120, 126, 204, 30, 158, 38, 103, 52, 139, 248, 61, 217, 135, 10, 156, 15, 68, 5, 50, 103, 35, 240, 217, 164, 195, 152, 74, 75, 188, 90, 200, 130, 136, 121, 78, 18, 53, 53, 143, 227, 30, 181, 41, 88, 23, 171, 207, 11, 100, 72, 129, 59, 4, 220, 188, 182, 116, 156, 110, 109, 108, 28, 117, 60, 130, 85, 171, 230, 189, 142, 246, 223, 74 },
                            PhoneNumber = "3456789012",
                            RoleId = 2,
                            SectorId = 4
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 5, 20, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "bob.williams@example.com",
                            IsConfirmed = true,
                            Name = "bob williams",
                            PasswordHash = new byte[] { 103, 253, 123, 26, 168, 54, 93, 239, 221, 29, 212, 241, 58, 212, 206, 90, 217, 97, 71, 190, 226, 197, 181, 187, 125, 230, 137, 40, 131, 100, 199, 248, 72, 75, 147, 134, 27, 82, 113, 168, 248, 172, 71, 248, 185, 114, 99, 70, 245, 64, 69, 181, 60, 68, 130, 219, 179, 48, 237, 105, 40, 148, 21, 235 },
                            PasswordSalt = new byte[] { 146, 131, 122, 173, 36, 94, 102, 129, 5, 204, 191, 17, 15, 22, 98, 139, 3, 62, 81, 126, 123, 69, 41, 4, 59, 217, 147, 249, 222, 17, 207, 43, 231, 29, 99, 167, 28, 162, 230, 97, 2, 89, 210, 64, 214, 182, 198, 18, 235, 4, 253, 150, 23, 224, 230, 226, 11, 90, 24, 115, 208, 193, 134, 137, 11, 226, 71, 118, 148, 111, 255, 209, 209, 101, 150, 182, 200, 49, 165, 76, 220, 232, 127, 235, 160, 197, 128, 84, 10, 153, 15, 119, 80, 253, 198, 166, 37, 56, 176, 97, 71, 82, 72, 172, 214, 61, 62, 234, 120, 7, 30, 187, 252, 159, 6, 140, 140, 5, 128, 213, 137, 150, 209, 233, 54, 206, 217, 238 },
                            PhoneNumber = "4567890123",
                            RoleId = 2,
                            SectorId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 5, 25, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "charlie.brown@example.com",
                            IsConfirmed = true,
                            Name = "charlie brown",
                            PasswordHash = new byte[] { 75, 37, 247, 19, 137, 111, 122, 49, 101, 36, 214, 18, 205, 228, 92, 132, 29, 241, 55, 127, 241, 211, 188, 151, 81, 244, 204, 111, 14, 65, 145, 97, 62, 77, 92, 193, 95, 35, 206, 155, 3, 234, 20, 198, 64, 15, 60, 159, 34, 84, 62, 22, 13, 185, 24, 221, 94, 253, 103, 192, 139, 192, 4, 127 },
                            PasswordSalt = new byte[] { 189, 105, 100, 115, 23, 48, 69, 80, 52, 159, 111, 80, 3, 18, 122, 188, 125, 201, 34, 12, 84, 124, 199, 18, 226, 238, 181, 189, 41, 156, 212, 159, 116, 109, 232, 0, 86, 167, 93, 79, 156, 232, 30, 47, 201, 15, 70, 108, 215, 164, 73, 186, 50, 206, 161, 204, 212, 215, 253, 42, 133, 185, 174, 186, 4, 212, 200, 156, 49, 163, 224, 98, 64, 215, 173, 163, 28, 61, 107, 192, 43, 127, 23, 232, 245, 77, 221, 146, 26, 12, 68, 36, 47, 237, 171, 162, 183, 134, 244, 9, 233, 198, 82, 87, 203, 24, 196, 39, 33, 60, 226, 245, 200, 233, 216, 170, 200, 246, 14, 81, 202, 197, 28, 169, 147, 223, 209, 206 },
                            PhoneNumber = "5678901234",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 5, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "diana.clark@example.com",
                            IsConfirmed = true,
                            Name = "diana clark",
                            PasswordHash = new byte[] { 197, 88, 240, 171, 89, 1, 23, 53, 86, 150, 238, 170, 84, 149, 59, 226, 118, 61, 168, 77, 251, 224, 57, 74, 230, 81, 131, 95, 220, 121, 162, 49, 139, 64, 164, 24, 139, 100, 106, 177, 250, 41, 240, 16, 231, 154, 27, 180, 11, 212, 139, 247, 144, 157, 120, 83, 103, 81, 214, 237, 166, 22, 134, 246 },
                            PasswordSalt = new byte[] { 94, 169, 178, 141, 23, 3, 128, 81, 105, 40, 161, 63, 148, 229, 174, 246, 43, 50, 197, 38, 158, 179, 111, 116, 63, 10, 121, 200, 207, 85, 203, 197, 70, 111, 189, 189, 70, 64, 164, 46, 204, 26, 0, 40, 234, 68, 173, 242, 125, 232, 118, 193, 32, 25, 197, 236, 39, 94, 120, 13, 201, 59, 20, 211, 58, 106, 40, 162, 95, 236, 68, 114, 254, 48, 84, 235, 182, 87, 49, 102, 78, 42, 199, 170, 226, 221, 11, 251, 139, 46, 214, 112, 235, 251, 115, 227, 80, 111, 136, 198, 133, 251, 33, 56, 180, 146, 111, 40, 26, 14, 173, 21, 42, 16, 192, 173, 217, 211, 242, 209, 230, 83, 229, 89, 97, 23, 183, 171 },
                            PhoneNumber = "6789012345",
                            RoleId = 2,
                            SectorId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 6, 15, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "edward.davis@example.com",
                            IsConfirmed = true,
                            Name = "edward davis",
                            PasswordHash = new byte[] { 181, 223, 238, 123, 100, 82, 78, 35, 225, 216, 159, 189, 72, 38, 133, 78, 138, 2, 85, 182, 210, 120, 90, 67, 70, 123, 30, 22, 117, 90, 17, 154, 194, 242, 217, 230, 107, 230, 111, 207, 91, 218, 158, 116, 16, 201, 206, 78, 108, 206, 64, 144, 211, 242, 216, 219, 18, 56, 151, 93, 106, 149, 130, 129 },
                            PasswordSalt = new byte[] { 93, 34, 161, 203, 124, 241, 177, 77, 249, 17, 99, 10, 151, 54, 177, 251, 12, 30, 53, 153, 10, 83, 214, 28, 96, 189, 38, 194, 31, 171, 83, 163, 192, 5, 111, 181, 167, 98, 202, 130, 252, 118, 126, 238, 176, 121, 233, 129, 168, 108, 232, 140, 56, 189, 67, 154, 86, 96, 222, 151, 161, 6, 124, 247, 83, 84, 161, 20, 186, 224, 121, 161, 38, 196, 131, 139, 195, 87, 73, 10, 30, 92, 183, 170, 252, 210, 202, 132, 61, 203, 10, 104, 253, 214, 101, 81, 231, 63, 226, 9, 26, 218, 237, 59, 11, 154, 225, 169, 230, 229, 3, 81, 254, 36, 46, 41, 139, 34, 6, 2, 182, 190, 129, 81, 245, 241, 2, 227 },
                            PhoneNumber = "7890123456",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 7, 10, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "fiona.evans@example.com",
                            IsConfirmed = true,
                            Name = "fiona evans",
                            PasswordHash = new byte[] { 213, 82, 121, 206, 192, 202, 198, 193, 134, 126, 219, 236, 221, 68, 133, 76, 131, 113, 242, 16, 111, 195, 150, 39, 64, 198, 97, 200, 132, 191, 230, 183, 68, 87, 142, 193, 206, 134, 59, 165, 138, 40, 66, 134, 53, 104, 128, 15, 170, 67, 220, 25, 58, 26, 1, 218, 78, 156, 12, 3, 195, 133, 127, 48 },
                            PasswordSalt = new byte[] { 26, 51, 78, 222, 149, 79, 134, 247, 169, 152, 12, 175, 69, 107, 69, 235, 204, 125, 27, 93, 240, 98, 234, 148, 49, 100, 148, 217, 62, 209, 136, 165, 204, 90, 111, 120, 251, 17, 85, 200, 158, 135, 121, 174, 131, 19, 21, 23, 198, 248, 11, 147, 9, 208, 171, 200, 238, 21, 174, 213, 113, 82, 1, 53, 161, 107, 245, 150, 125, 251, 169, 31, 5, 32, 77, 34, 35, 20, 134, 66, 138, 129, 171, 123, 50, 122, 94, 18, 165, 80, 111, 208, 157, 63, 40, 31, 84, 228, 51, 173, 85, 125, 72, 136, 115, 97, 225, 241, 191, 241, 173, 145, 107, 149, 113, 51, 102, 232, 42, 221, 106, 223, 180, 56, 234, 25, 148, 244 },
                            PhoneNumber = "8901234567",
                            RoleId = 2,
                            SectorId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 8, 5, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "george.fisher@example.com",
                            IsConfirmed = true,
                            Name = "george fisher",
                            PasswordHash = new byte[] { 248, 144, 97, 178, 26, 254, 195, 36, 91, 42, 34, 118, 116, 19, 211, 77, 97, 188, 0, 170, 53, 143, 114, 233, 5, 5, 42, 48, 235, 4, 123, 200, 19, 232, 190, 209, 236, 223, 141, 238, 45, 64, 106, 141, 108, 241, 138, 113, 123, 198, 206, 132, 29, 140, 179, 246, 198, 232, 116, 172, 113, 46, 239, 232 },
                            PasswordSalt = new byte[] { 181, 61, 141, 140, 247, 208, 52, 167, 43, 20, 119, 208, 143, 148, 54, 144, 13, 142, 118, 179, 162, 81, 134, 97, 5, 231, 120, 78, 72, 113, 71, 128, 54, 81, 212, 33, 198, 144, 173, 109, 22, 80, 160, 0, 231, 247, 137, 199, 208, 145, 241, 65, 68, 93, 83, 232, 225, 115, 60, 7, 200, 23, 150, 61, 101, 227, 131, 82, 127, 173, 171, 184, 67, 139, 255, 61, 161, 49, 100, 235, 214, 113, 82, 160, 16, 253, 154, 227, 32, 194, 163, 92, 199, 172, 80, 229, 243, 181, 122, 96, 94, 170, 4, 192, 140, 188, 181, 8, 85, 150, 63, 126, 86, 48, 139, 110, 25, 93, 29, 21, 219, 19, 98, 105, 73, 177, 44, 39 },
                            PhoneNumber = "9012345678",
                            RoleId = 2,
                            SectorId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 9, 1, 1, 17, 51, 0, DateTimeKind.Utc),
                            Email = "hannah.green@example.com",
                            IsConfirmed = true,
                            Name = "hannah green",
                            PasswordHash = new byte[] { 38, 43, 91, 53, 228, 2, 12, 20, 10, 253, 210, 38, 105, 8, 122, 32, 234, 226, 130, 152, 25, 238, 214, 51, 93, 1, 233, 67, 198, 195, 5, 18, 63, 120, 212, 29, 208, 110, 167, 139, 145, 11, 245, 129, 96, 237, 191, 31, 187, 43, 6, 212, 31, 196, 221, 11, 78, 97, 109, 56, 249, 149, 175, 51 },
                            PasswordSalt = new byte[] { 114, 97, 179, 254, 154, 192, 146, 236, 210, 59, 152, 172, 225, 147, 31, 157, 243, 87, 62, 235, 240, 240, 172, 25, 192, 140, 203, 150, 121, 4, 254, 126, 91, 125, 207, 147, 216, 249, 166, 211, 242, 85, 242, 210, 71, 198, 251, 117, 66, 22, 245, 178, 123, 159, 130, 142, 11, 160, 254, 130, 41, 251, 32, 228, 88, 141, 77, 211, 3, 119, 36, 194, 120, 174, 151, 91, 149, 157, 5, 141, 37, 169, 109, 250, 43, 83, 179, 239, 194, 169, 89, 39, 127, 150, 18, 12, 60, 244, 110, 130, 242, 249, 233, 172, 44, 188, 121, 247, 55, 247, 121, 249, 68, 182, 176, 120, 105, 56, 111, 109, 151, 213, 150, 199, 103, 220, 11, 127 },
                            PhoneNumber = "0123456789",
                            RoleId = 2,
                            SectorId = 3
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cliente"
                        });
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Clan", "Clan")
                        .WithMany("Coders")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Gender", "Gender")
                        .WithMany("Coders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clan");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderLanguage", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Language", "Language")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.LanguageLevel", "LanguageLevel")
                        .WithMany("CoderLanguages")
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderSoftSkill", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderSoftSkills")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.SoftSkill", "SoftSkill")
                        .WithMany("CoderSoftSkills")
                        .HasForeignKey("SoftSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("SoftSkill");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.CoderTechnicalSkill", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.Coder", "Coder")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("CoderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.TechnicalSkill", "TechnicalSkill")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("TechnicalSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", "TechnicalSkillLevel")
                        .WithMany("CoderTechnicalSkills")
                        .HasForeignKey("TechnicalSkillLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Coder");

                    b.Navigation("TechnicalSkill");

                    b.Navigation("TechnicalSkillLevel");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.User", b =>
                {
                    b.HasOne("Backend_Riwi_LinkUp.Models.UserRole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend_Riwi_LinkUp.Models.Sector", "Sector")
                        .WithMany("Users")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Clan", b =>
                {
                    b.Navigation("Coders");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Coder", b =>
                {
                    b.Navigation("CoderLanguages");

                    b.Navigation("CoderSoftSkills");

                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Gender", b =>
                {
                    b.Navigation("Coders");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Language", b =>
                {
                    b.Navigation("CoderLanguages");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.LanguageLevel", b =>
                {
                    b.Navigation("CoderLanguages");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.Sector", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.SoftSkill", b =>
                {
                    b.Navigation("CoderSoftSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkill", b =>
                {
                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.TechnicalSkillLevel", b =>
                {
                    b.Navigation("CoderTechnicalSkills");
                });

            modelBuilder.Entity("Backend_Riwi_LinkUp.Models.UserRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
